{"version":3,"file":"service.js","sourceRoot":"","sources":["../src/service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Capabilities, Services } from '@wdio/types';\n\nimport log from './log.js';\nimport mockStore from './mockStore.js';\nimport { CUSTOM_CAPABILITY_NAME } from './constants.js';\nimport { execute } from './commands/execute.js';\nimport { mock } from './commands/mock.js';\nimport { clearAllMocks } from './commands/clearAllMocks.js';\nimport { isMockFunction } from './commands/isMockFunction.js';\nimport { resetAllMocks } from './commands/resetAllMocks.js';\nimport { restoreAllMocks } from './commands/restoreAllMocks.js';\nimport { mockAll } from './commands/mockAll.js';\nimport type { AbstractFn, BrowserExtension, ElectronServiceOptions, ExecuteOpts } from './index.js';\n\nconst waitUntilWindowAvailable = async (browser: WebdriverIO.Browser) =>\n  await browser.waitUntil(async () => {\n    const numWindows = (await browser.getWindowHandles()).length;\n    return numWindows > 0;\n  });\n\nexport default class ElectronWorkerService implements Services.ServiceInstance {\n  #browser?: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser;\n  #globalOptions: ElectronServiceOptions;\n  #clearMocks = false;\n  #resetMocks = false;\n  #restoreMocks = false;\n\n  constructor(globalOptions: ElectronServiceOptions = {}) {\n    this.#globalOptions = globalOptions;\n  }\n\n  get browser() {\n    return this.#browser;\n  }\n\n  set browser(browser) {\n    this.#browser = browser;\n  }\n\n  #getElectronAPI(browserInstance?: WebdriverIO.Browser) {\n    const browser = (browserInstance || this.browser) as WebdriverIO.Browser;\n    const api = {\n      clearAllMocks: clearAllMocks.bind(this),\n      execute: (script: string | AbstractFn, ...args: unknown[]) => execute.apply(this, [browser, script, ...args]),\n      isMockFunction: isMockFunction.bind(this),\n      mock: mock.bind(this),\n      mockAll: mockAll.bind(this),\n      resetAllMocks: resetAllMocks.bind(this),\n      restoreAllMocks: restoreAllMocks.bind(this),\n    };\n    return Object.assign({}, api) as unknown as BrowserExtension['electron'];\n  }\n\n  async before(\n    capabilities: WebdriverIO.Capabilities,\n    _specs: string[],\n    instance: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser,\n  ): Promise<void> {\n    const browser = instance as WebdriverIO.Browser;\n    const mrBrowser = instance as WebdriverIO.MultiRemoteBrowser;\n    const { clearMocks, resetMocks, restoreMocks } = Object.assign(\n      {},\n      this.#globalOptions,\n      capabilities[CUSTOM_CAPABILITY_NAME],\n    );\n\n    this.#clearMocks = clearMocks ?? false;\n    this.#resetMocks = resetMocks ?? false;\n    this.#restoreMocks = restoreMocks ?? false;\n    this.#browser = browser;\n\n    /**\n     * add electron API to browser object\n     */\n    browser.electron = this.#getElectronAPI();\n    if (this.#browser.isMultiremote) {\n      for (const instance of mrBrowser.instances) {\n        const mrInstance = mrBrowser.getInstance(instance);\n        const caps =\n          (mrInstance.requestedCapabilities as Capabilities.W3CCapabilities).alwaysMatch ||\n          (mrInstance.requestedCapabilities as WebdriverIO.Capabilities);\n\n        if (!caps[CUSTOM_CAPABILITY_NAME]) {\n          continue;\n        }\n\n        log.debug('Adding Electron API to browser object instance named: ', instance);\n        mrInstance.electron = this.#getElectronAPI(mrInstance);\n\n        // wait until an Electron BrowserWindow is available\n        await waitUntilWindowAvailable(mrInstance);\n      }\n    } else {\n      // wait until an Electron BrowserWindow is available\n      await waitUntilWindowAvailable(browser);\n    }\n  }\n\n  async beforeTest() {\n    if (this.#clearMocks) {\n      await clearAllMocks();\n    }\n    if (this.#resetMocks) {\n      await resetAllMocks();\n    }\n    if (this.#restoreMocks) {\n      await restoreAllMocks();\n    }\n  }\n\n  async afterCommand(commandName: string, args: unknown[]) {\n    // ensure mocks are updated\n    const mocks = mockStore.getMocks();\n    const isInternalCommand = () => Boolean((args.at(-1) as ExecuteOpts)?.internal);\n\n    if (commandName === 'execute' && mocks.length > 0 && !isInternalCommand()) {\n      await Promise.all(mocks.map(async ([_mockId, mock]) => await mock.update()));\n    }\n  }\n}\n"]}