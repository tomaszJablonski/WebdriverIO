{"version":3,"file":"mock.js","sourceRoot":"","sources":["../../src/commands/mock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AACxC,OAAO,SAAS,MAAM,iBAAiB,CAAC;AAGxC,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,OAAe,EAAE,QAAgB;IAC1D,IAAI,CAAC;QACH,2CAA2C;QAC3C,MAAM,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC,YAAY,OAAO,IAAI,QAAQ,EAAE,CAAC,CAAC;QAC1E,MAAM,YAAY,CAAC,SAAS,EAAE,CAAC;QAC/B,OAAO,YAAY,CAAC;IACtB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,oDAAoD;QACpD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACpD,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC3B,OAAO,OAAO,CAAC;IACjB,CAAC;AACH,CAAC","sourcesContent":["import { createMock } from '../mock.js';\nimport mockStore from '../mockStore.js';\nimport type { ElectronMock } from '../types.js';\n\nexport async function mock(apiName: string, funcName: string): Promise<ElectronMock> {\n  try {\n    // retrieve an existing mock from the store\n    const existingMock = mockStore.getMock(`electron.${apiName}.${funcName}`);\n    await existingMock.mockReset();\n    return existingMock;\n  } catch (e) {\n    // mock doesn't exist, create a new one and store it\n    const newMock = await createMock(apiName, funcName);\n    mockStore.setMock(newMock);\n    return newMock;\n  }\n}\n"]}