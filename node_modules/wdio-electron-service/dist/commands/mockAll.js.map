{"version":3,"file":"mockAll.js","sourceRoot":"","sources":["../../src/commands/mockAll.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAGjC,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,OAAe;IAC3C,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAC/C,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAgC,CAAC,CAAC,CAAC,QAAQ,EAAE,EACzF,OAAO,EACP,EAAE,QAAQ,EAAE,IAAI,EAAE,CACnB,CAAC;IACF,MAAM,UAAU,GAAiC,UAAU;SACxD,KAAK,CAAC,GAAG,CAAC;SACV,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAExE,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;QAClC,UAAU,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import { mock } from './mock.js';\nimport type { ElectronMock, ExecuteOpts } from '../types.js';\n\nexport async function mockAll(apiName: string) {\n  const apiFnNames = await browser.electron.execute<string, [string, ExecuteOpts]>(\n    (electron, apiName) => Object.keys(electron[apiName as keyof typeof electron]).toString(),\n    apiName,\n    { internal: true },\n  );\n  const mockedApis: Record<string, ElectronMock> = apiFnNames\n    .split(',')\n    .reduce((a, funcName) => ({ ...a, [funcName]: () => undefined }), {});\n\n  for (const funcName in mockedApis) {\n    mockedApis[funcName] = await mock(apiName, funcName);\n  }\n\n  return mockedApis;\n}\n"]}