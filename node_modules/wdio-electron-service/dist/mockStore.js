var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ElectronServiceMockStore_mockFns;
export class ElectronServiceMockStore {
    constructor() {
        _ElectronServiceMockStore_mockFns.set(this, void 0);
        __classPrivateFieldSet(this, _ElectronServiceMockStore_mockFns, new Map(), "f");
    }
    setMock(mock) {
        __classPrivateFieldGet(this, _ElectronServiceMockStore_mockFns, "f").set(mock.getMockName(), mock);
        return mock;
    }
    getMock(mockId) {
        const mock = __classPrivateFieldGet(this, _ElectronServiceMockStore_mockFns, "f").get(mockId);
        if (!mock) {
            throw new Error(`No mock registered for "${mockId}"`);
        }
        return mock;
    }
    getMocks() {
        return Array.from(__classPrivateFieldGet(this, _ElectronServiceMockStore_mockFns, "f").entries());
    }
}
_ElectronServiceMockStore_mockFns = new WeakMap();
const mockStore = new ElectronServiceMockStore();
export default mockStore;
//# sourceMappingURL=mockStore.js.map