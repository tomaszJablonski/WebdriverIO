{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../src/cjs/classes.ts"],"names":[],"mappings":";;;AAEA,gEAAgE;AAChE,6DAA6D;AAC7D,MAAM,aAAa,GAAG,IAAI,QAAQ,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAC;AAE5E,MAAa,mBAAmB;IAG9B,YAAY,OAAgB,EAAE,IAAa,EAAE,MAA0B;QACrE,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,IAAI,EAAE;YAC1B,MAAM,UAAU,GAAG,gBAAgB,CAAC;YACpC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,aAAa,CAAC,UAAU,CAAC,CAAC;YAC9D,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,EAAE,CAAC;IACP,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,MAA0B,EAAE,YAA6C;QACvF,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAA6B,CAAC;QACnE,OAAO,QAAQ,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACpD,CAAC;CACF;AAfD,kDAeC;AAED,MAAa,kBAAkB;IAG7B,YAAY,aAAsB;QAChC,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,IAAI,EAAE;YAC1B,MAAM,UAAU,GAAG,eAAe,CAAC;YACnC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,aAAa,CAAC,UAAU,CAAC,CAAC;YAC7D,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;QACpC,CAAC,CAAC,EAAE,CAAC;IACP,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAA0B,EAC1B,YAAsC,EACtC,KAAe,EACf,GAAW;QAEX,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAA6B,CAAC;QACnE,OAAO,QAAQ,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,YAAsC,EAAE,KAAe,EAAE,OAA4B;QAChG,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAA6B,CAAC;QACnE,OAAO,QAAQ,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;CACF;AAzBD,gDAyBC","sourcesContent":["import { Capabilities, Options, Services } from '@wdio/types';\n\n// Workaround for ts-node converting dynamic imports to requires\n// see https://github.com/TypeStrong/ts-node/discussions/1290\nconst dynamicImport = new Function('specifier', 'return import(specifier)');\n\nexport class CJSElectronLauncher {\n  private instance: Promise<Services.ServiceInstance>;\n\n  constructor(options: unknown, caps: unknown, config: Options.Testrunner) {\n    this.instance = (async () => {\n      const importPath = '../launcher.js';\n      const { default: Launcher } = await dynamicImport(importPath);\n      return new Launcher(options, caps, config);\n    })();\n  }\n\n  async onPrepare(config: Options.Testrunner, capabilities: Capabilities.RemoteCapabilities) {\n    const instance = (await this.instance) as Services.ServiceInstance;\n    return instance.onPrepare?.(config, capabilities);\n  }\n}\n\nexport class CJSElectronService {\n  private instance: Promise<Services.ServiceInstance>;\n\n  constructor(globalOptions: unknown) {\n    this.instance = (async () => {\n      const importPath = '../service.js';\n      const { default: Service } = await dynamicImport(importPath);\n      return new Service(globalOptions);\n    })();\n  }\n\n  async beforeSession(\n    config: Options.Testrunner,\n    capabilities: WebdriverIO.Capabilities,\n    specs: string[],\n    cid: string,\n  ) {\n    const instance = (await this.instance) as Services.ServiceInstance;\n    return instance.beforeSession?.(config, capabilities, specs, cid);\n  }\n\n  async before(capabilities: WebdriverIO.Capabilities, specs: string[], browser: WebdriverIO.Browser) {\n    const instance = (await this.instance) as Services.ServiceInstance;\n    return instance.before?.(capabilities, specs, browser);\n  }\n}\n"]}