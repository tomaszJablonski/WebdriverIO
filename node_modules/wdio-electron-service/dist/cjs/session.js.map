{"version":3,"file":"session.js","sourceRoot":"","sources":["../../src/cjs/session.ts"],"names":[],"mappings":";;;AAAA,6CAAqC;AAGrC,6CAAuE;AACvE,iDAAwD;AAEjD,KAAK,UAAU,IAAI,CAAC,IAA4B;IACrD,mEAAmE;IACnE,6EAA6E;IAC7E,MAAM,cAAc,GAAG,IAA0B,CAAC;IAClD,IAAI,YAAY,GAAG;QACjB,WAAW,EAAE,UAAU;QACvB,CAAC,qCAAsB,CAAC,EAAE,IAAI;KAC/B,CAAC;IAEF,MAAM,QAAQ,GAAG,IAAI,gCAAmB,CAAC,IAAI,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IAC7E,MAAM,OAAO,GAAG,IAAI,+BAAkB,CAAC,IAAI,CAAC,CAAC;IAE7C,MAAM,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEzD,qBAAqB;IACrB,MAAM,OAAO,GAAG,MAAM,IAAA,oBAAM,EAAC;QAC3B,YAAY;KACb,CAAC,CAAC;IAEH,MAAM,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IAEhD,OAAO,OAAO,CAAC;AACjB,CAAC;AAtBD,oBAsBC","sourcesContent":["import { remote } from 'webdriverio';\nimport type { Options } from '@wdio/types';\n\nimport { CJSElectronLauncher, CJSElectronService } from './classes.js';\nimport { CUSTOM_CAPABILITY_NAME } from './constants.js';\nimport type { ElectronServiceOptions } from './types.js';\nexport async function init(opts: ElectronServiceOptions) {\n  // CJS variants of the Launcher and Service classes are needed here\n  // - which is why we are not simply doing a dynamic import of `../session.js`\n  const testRunnerOpts = opts as Options.Testrunner;\n  let capabilities = {\n    browserName: 'electron',\n    [CUSTOM_CAPABILITY_NAME]: opts,\n  };\n\n  const launcher = new CJSElectronLauncher(opts, capabilities, testRunnerOpts);\n  const service = new CJSElectronService(opts);\n\n  await launcher.onPrepare(testRunnerOpts, [capabilities]);\n\n  // initialise session\n  const browser = await remote({\n    capabilities,\n  });\n\n  await service.before(capabilities, [], browser);\n\n  return browser;\n}\n"]}