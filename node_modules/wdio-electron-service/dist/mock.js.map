{"version":3,"file":"mock.js","sourceRoot":"","sources":["../src/mock.ts"],"names":[],"mappings":"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","sourcesContent":["import { fn as vitestFn, type Mock } from '@vitest/spy';\nimport type { AbstractFn, ElectronApiFn, ElectronInterface, ElectronMock, ElectronType, ExecuteOpts } from './types.js';\n\nasync function restoreElectronFunctionality(apiName: string, funcName: string) {\n  await browser.electron.execute<void, [string, string, ExecuteOpts]>(\n    (electron, apiName, funcName) => {\n      const electronApi = electron[apiName as keyof typeof electron];\n      const originalApi = globalThis.originalApi as Record<ElectronInterface, ElectronType[ElectronInterface]>;\n      const originalApiMethod = originalApi[apiName as keyof typeof originalApi][\n        funcName as keyof ElectronType[ElectronInterface]\n      ] as ElectronApiFn;\n\n      (electronApi[funcName as keyof typeof electronApi] as Mock).mockImplementation(originalApiMethod);\n    },\n    apiName,\n    funcName,\n    { internal: true },\n  );\n}\n\nexport async function createMock(apiName: string, funcName: string) {\n  const outerMock = vitestFn();\n  const outerMockImplementation = outerMock.mockImplementation;\n  const outerMockImplementationOnce = outerMock.mockImplementationOnce;\n  const outerMockClear = outerMock.mockClear;\n  const outerMockReset = outerMock.mockReset;\n\n  outerMock.mockName(`electron.${apiName}.${funcName}`);\n\n  const mock = outerMock as unknown as ElectronMock;\n\n  mock.__isElectronMock = true;\n\n  // initialise inner (Electron) mock\n  await browser.electron.execute<void, [string, string, ExecuteOpts]>(\n    async (electron, apiName, funcName) => {\n      const electronApi = electron[apiName as keyof typeof electron];\n      const spy = await import('@vitest/spy');\n      const mockFn = spy.fn();\n\n      // replace target API with mock\n      electronApi[funcName as keyof typeof electronApi] = mockFn as ElectronApiFn;\n    },\n    apiName,\n    funcName,\n    { internal: true },\n  );\n\n  mock.update = async () => {\n    // synchronises inner and outer mocks\n    const calls = await browser.electron.execute<unknown[][], [string, string, ExecuteOpts]>(\n      (electron, apiName, funcName) => {\n        const mockObj = electron[apiName as keyof typeof electron][\n          funcName as keyof ElectronType[ElectronInterface]\n        ] as ElectronMock;\n        return mockObj.mock?.calls || [];\n      },\n      apiName,\n      funcName,\n      { internal: true },\n    );\n\n    // re-apply calls from the electron main process mock to the outer one\n    if (mock.mock.calls.length < calls.length) {\n      calls.forEach((call: unknown[], index: number) => {\n        if (!mock.mock.calls[index]) {\n          mock?.apply(mock, call);\n        }\n      });\n    }\n\n    return mock;\n  };\n\n  mock.mockImplementation = async (implFn: AbstractFn) => {\n    await browser.electron.execute<void, [string, string, string, ExecuteOpts]>(\n      (electron, apiName, funcName, mockImplementationStr) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        const mockImpl = eval?.(`\"use strict\"; ${mockImplementationStr}`) as AbstractFn;\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockImplementation(mockImpl);\n      },\n      apiName,\n      funcName,\n      implFn.toString(),\n      { internal: true },\n    );\n    outerMockImplementation(implFn);\n\n    return mock;\n  };\n\n  mock.mockImplementationOnce = async (implFn: AbstractFn) => {\n    await browser.electron.execute<void, [string, string, string, ExecuteOpts]>(\n      (electron, apiName, funcName, mockImplementationStr) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        const mockImpl = eval?.(`\"use strict\"; ${mockImplementationStr}`) as AbstractFn;\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockImplementationOnce(mockImpl);\n      },\n      apiName,\n      funcName,\n      implFn.toString(),\n      { internal: true },\n    );\n    outerMockImplementationOnce(implFn);\n\n    return mock;\n  };\n\n  mock.mockReturnValue = async (value: unknown) => {\n    await browser.electron.execute<void, [string, string, unknown, ExecuteOpts]>(\n      (electron, apiName, funcName, returnValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockReturnValue(returnValue);\n      },\n      apiName,\n      funcName,\n      value,\n      { internal: true },\n    );\n\n    return mock;\n  };\n\n  mock.mockReturnValueOnce = async (value: unknown) => {\n    await browser.electron.execute<void, [string, string, unknown, ExecuteOpts]>(\n      (electron, apiName, funcName, returnValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockReturnValueOnce(returnValue);\n      },\n      apiName,\n      funcName,\n      value,\n      { internal: true },\n    );\n\n    return mock;\n  };\n\n  mock.mockResolvedValue = async (value: unknown) => {\n    await browser.electron.execute<void, [string, string, unknown, ExecuteOpts]>(\n      (electron, apiName, funcName, resolvedValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockResolvedValue(resolvedValue);\n      },\n      apiName,\n      funcName,\n      value,\n      { internal: true },\n    );\n\n    return mock;\n  };\n\n  mock.mockResolvedValueOnce = async (value: unknown) => {\n    await browser.electron.execute<void, [string, string, unknown, ExecuteOpts]>(\n      (electron, apiName, funcName, resolvedValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockResolvedValueOnce(resolvedValue);\n      },\n      apiName,\n      funcName,\n      value,\n      { internal: true },\n    );\n\n    return mock;\n  };\n\n  mock.mockRejectedValue = async (value: unknown) => {\n    await browser.electron.execute<void, [string, string, unknown, ExecuteOpts]>(\n      (electron, apiName, funcName, rejectedValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockRejectedValue(rejectedValue);\n      },\n      apiName,\n      funcName,\n      value,\n      { internal: true },\n    );\n\n    return mock;\n  };\n\n  mock.mockRejectedValueOnce = async (value: unknown) => {\n    await browser.electron.execute<void, [string, string, unknown, ExecuteOpts]>(\n      (electron, apiName, funcName, rejectedValue) => {\n        const electronApi = electron[apiName as keyof typeof electron];\n        (electronApi[funcName as keyof typeof electronApi] as Mock).mockRejectedValueOnce(rejectedValue);\n      },\n      apiName,\n      funcName,\n      value,\n      { internal: true },\n    );\n\n    return mock;\n  };\n\n  mock.mockClear = async () => {\n    // clears mock history\n    await browser.electron.execute<void, [string, string, ExecuteOpts]>(\n      (electron, apiName, funcName) => {\n        (\n          electron[apiName as keyof typeof electron][funcName as keyof ElectronType[ElectronInterface]] as Mock\n        ).mockClear();\n      },\n      apiName,\n      funcName,\n      { internal: true },\n    );\n    outerMockClear();\n\n    return mock;\n  };\n\n  mock.mockReset = async () => {\n    // resets inner implementation to an empty function and clears mock history\n    await browser.electron.execute<void, [string, string, ExecuteOpts]>(\n      (electron, apiName, funcName) => {\n        (\n          electron[apiName as keyof typeof electron][funcName as keyof ElectronType[ElectronInterface]] as Mock\n        ).mockReset();\n      },\n      apiName,\n      funcName,\n      { internal: true },\n    );\n    outerMockReset();\n\n    // vitest mockReset doesn't clear mock history so we need to explicitly clear both mocks\n    await mock.mockClear();\n\n    return mock;\n  };\n\n  mock.mockRestore = async () => {\n    // restores inner mock implementation to the original function\n    await restoreElectronFunctionality(apiName, funcName);\n\n    // clear mocks\n    outerMockClear();\n    await mock.mockClear();\n\n    return mock;\n  };\n\n  mock.mockReturnThis = async () => {\n    return await browser.electron.execute<void, [string, string, ExecuteOpts]>(\n      (electron, apiName, funcName) => {\n        (\n          electron[apiName as keyof typeof electron][funcName as keyof ElectronType[ElectronInterface]] as Mock\n        ).mockReturnThis();\n      },\n      apiName,\n      funcName,\n      { internal: true },\n    );\n  };\n\n  mock.withImplementation = async (implFn, callbackFn) => {\n    return await browser.electron.execute<unknown, [string, string, string, string, ExecuteOpts]>(\n      async (electron, apiName, funcName, implFnStr, callbackFnStr) => {\n        const callback = eval?.(`\"use strict\"; ${callbackFnStr}`) as AbstractFn;\n        const impl = eval?.(`\"use strict\"; ${implFnStr}`) as AbstractFn;\n        let result: unknown | Promise<unknown>;\n        (\n          electron[apiName as keyof typeof electron][funcName as keyof ElectronType[ElectronInterface]] as Mock\n        ).withImplementation(impl, () => {\n          result = callback(electron);\n        });\n\n        return (result as Promise<unknown>)?.then ? await result : result;\n      },\n      apiName,\n      funcName,\n      implFn.toString(),\n      callbackFn.toString(),\n      { internal: true },\n    );\n  };\n\n  return mock;\n}\n"]}