var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ElectronWorkerService_instances, _ElectronWorkerService_browser, _ElectronWorkerService_globalOptions, _ElectronWorkerService_clearMocks, _ElectronWorkerService_resetMocks, _ElectronWorkerService_restoreMocks, _ElectronWorkerService_getElectronAPI;
import log from './log.js';
import mockStore from './mockStore.js';
import { CUSTOM_CAPABILITY_NAME } from './constants.js';
import { execute } from './commands/execute.js';
import { mock } from './commands/mock.js';
import { clearAllMocks } from './commands/clearAllMocks.js';
import { isMockFunction } from './commands/isMockFunction.js';
import { resetAllMocks } from './commands/resetAllMocks.js';
import { restoreAllMocks } from './commands/restoreAllMocks.js';
import { mockAll } from './commands/mockAll.js';
const waitUntilWindowAvailable = async (browser) => await browser.waitUntil(async () => {
    const numWindows = (await browser.getWindowHandles()).length;
    return numWindows > 0;
});
class ElectronWorkerService {
    constructor(globalOptions = {}) {
        _ElectronWorkerService_instances.add(this);
        _ElectronWorkerService_browser.set(this, void 0);
        _ElectronWorkerService_globalOptions.set(this, void 0);
        _ElectronWorkerService_clearMocks.set(this, false);
        _ElectronWorkerService_resetMocks.set(this, false);
        _ElectronWorkerService_restoreMocks.set(this, false);
        __classPrivateFieldSet(this, _ElectronWorkerService_globalOptions, globalOptions, "f");
    }
    get browser() {
        return __classPrivateFieldGet(this, _ElectronWorkerService_browser, "f");
    }
    set browser(browser) {
        __classPrivateFieldSet(this, _ElectronWorkerService_browser, browser, "f");
    }
    async before(capabilities, _specs, instance) {
        const browser = instance;
        const mrBrowser = instance;
        const { clearMocks, resetMocks, restoreMocks } = Object.assign({}, __classPrivateFieldGet(this, _ElectronWorkerService_globalOptions, "f"), capabilities[CUSTOM_CAPABILITY_NAME]);
        __classPrivateFieldSet(this, _ElectronWorkerService_clearMocks, clearMocks ?? false, "f");
        __classPrivateFieldSet(this, _ElectronWorkerService_resetMocks, resetMocks ?? false, "f");
        __classPrivateFieldSet(this, _ElectronWorkerService_restoreMocks, restoreMocks ?? false, "f");
        __classPrivateFieldSet(this, _ElectronWorkerService_browser, browser, "f");
        /**
         * add electron API to browser object
         */
        browser.electron = __classPrivateFieldGet(this, _ElectronWorkerService_instances, "m", _ElectronWorkerService_getElectronAPI).call(this);
        if (__classPrivateFieldGet(this, _ElectronWorkerService_browser, "f").isMultiremote) {
            for (const instance of mrBrowser.instances) {
                const mrInstance = mrBrowser.getInstance(instance);
                const caps = mrInstance.requestedCapabilities.alwaysMatch ||
                    mrInstance.requestedCapabilities;
                if (!caps[CUSTOM_CAPABILITY_NAME]) {
                    continue;
                }
                log.debug('Adding Electron API to browser object instance named: ', instance);
                mrInstance.electron = __classPrivateFieldGet(this, _ElectronWorkerService_instances, "m", _ElectronWorkerService_getElectronAPI).call(this, mrInstance);
                // wait until an Electron BrowserWindow is available
                await waitUntilWindowAvailable(mrInstance);
            }
        }
        else {
            // wait until an Electron BrowserWindow is available
            await waitUntilWindowAvailable(browser);
        }
    }
    async beforeTest() {
        if (__classPrivateFieldGet(this, _ElectronWorkerService_clearMocks, "f")) {
            await clearAllMocks();
        }
        if (__classPrivateFieldGet(this, _ElectronWorkerService_resetMocks, "f")) {
            await resetAllMocks();
        }
        if (__classPrivateFieldGet(this, _ElectronWorkerService_restoreMocks, "f")) {
            await restoreAllMocks();
        }
    }
    async afterCommand(commandName, args) {
        // ensure mocks are updated
        const mocks = mockStore.getMocks();
        const isInternalCommand = () => Boolean(args.at(-1)?.internal);
        if (commandName === 'execute' && mocks.length > 0 && !isInternalCommand()) {
            await Promise.all(mocks.map(async ([_mockId, mock]) => await mock.update()));
        }
    }
}
_ElectronWorkerService_browser = new WeakMap(), _ElectronWorkerService_globalOptions = new WeakMap(), _ElectronWorkerService_clearMocks = new WeakMap(), _ElectronWorkerService_resetMocks = new WeakMap(), _ElectronWorkerService_restoreMocks = new WeakMap(), _ElectronWorkerService_instances = new WeakSet(), _ElectronWorkerService_getElectronAPI = function _ElectronWorkerService_getElectronAPI(browserInstance) {
    const browser = (browserInstance || this.browser);
    const api = {
        clearAllMocks: clearAllMocks.bind(this),
        execute: (script, ...args) => execute.apply(this, [browser, script, ...args]),
        isMockFunction: isMockFunction.bind(this),
        mock: mock.bind(this),
        mockAll: mockAll.bind(this),
        resetAllMocks: resetAllMocks.bind(this),
        restoreAllMocks: restoreAllMocks.bind(this),
    };
    return Object.assign({}, api);
};
export default ElectronWorkerService;
//# sourceMappingURL=service.js.map