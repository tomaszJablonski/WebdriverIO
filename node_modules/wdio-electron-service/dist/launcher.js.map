{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../src/launcher.ts"],"names":[],"mappings":"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","sourcesContent":["import util from 'node:util';\n\nimport findVersions from 'find-versions';\nimport { readPackageUp, type NormalizedReadResult } from 'read-package-up';\nimport { SevereServiceError } from 'webdriverio';\nimport type { Services, Options, Capabilities } from '@wdio/types';\n\nimport log from './log.js';\nimport { getBinaryPath, getAppBuildInfo } from './application.js';\nimport { getChromeOptions, getChromedriverOptions, getElectronCapabilities } from './capabilities.js';\nimport { getChromiumVersion } from './versions.js';\nimport { APP_NOT_FOUND_ERROR, CUSTOM_CAPABILITY_NAME } from './constants.js';\nimport type { ElectronServiceOptions } from './types.js';\n\nexport type ElectronServiceCapabilities = Capabilities.RemoteCapabilities & {\n  [CUSTOM_CAPABILITY_NAME]?: ElectronServiceOptions;\n};\n\nexport default class ElectronLaunchService implements Services.ServiceInstance {\n  #globalOptions: ElectronServiceOptions;\n  #projectRoot: string;\n\n  constructor(globalOptions: ElectronServiceOptions, _caps: unknown, config: Options.Testrunner) {\n    this.#globalOptions = globalOptions;\n    this.#projectRoot = config.rootDir || process.cwd();\n  }\n\n  async onPrepare(_config: Options.Testrunner, capabilities: ElectronServiceCapabilities) {\n    const capsList = Array.isArray(capabilities)\n      ? capabilities\n      : Object.values(capabilities).map((multiremoteOption) => multiremoteOption.capabilities);\n\n    const caps = capsList.flatMap((cap) => getElectronCapabilities(cap) as WebdriverIO.Capabilities);\n    const pkg =\n      (await readPackageUp({ cwd: this.#projectRoot })) ||\n      ({ packageJson: { dependencies: {}, devDependencies: {} } } as NormalizedReadResult);\n\n    const { dependencies, devDependencies } = pkg.packageJson;\n    const pkgElectronVersion =\n      dependencies?.electron ||\n      devDependencies?.electron ||\n      dependencies?.['electron-nightly'] ||\n      devDependencies?.['electron-nightly'];\n    const localElectronVersion = pkgElectronVersion ? findVersions(pkgElectronVersion, { loose: true })[0] : undefined;\n\n    if (!caps.length) {\n      const noElectronCapabilityError = new Error('No Electron browser found in capabilities');\n      log.error(noElectronCapabilityError);\n      throw noElectronCapabilityError;\n    }\n\n    await Promise.all(\n      caps.map(async (cap) => {\n        const electronVersion = cap.browserVersion || localElectronVersion;\n        const chromiumVersion = await getChromiumVersion(electronVersion);\n        log.debug(`Found Electron v${electronVersion} with Chromedriver v${chromiumVersion}`);\n\n        let { appBinaryPath, appArgs } = Object.assign({}, this.#globalOptions, cap[CUSTOM_CAPABILITY_NAME]);\n        if (!appBinaryPath) {\n          log.debug('No app binary found');\n          try {\n            const appBuildInfo = await getAppBuildInfo(pkg);\n\n            try {\n              appBinaryPath = await getBinaryPath(pkg.path, appBuildInfo, electronVersion);\n\n              log.debug(`Detected app binary at ${appBinaryPath}`);\n            } catch (e) {\n              const buildToolName = appBuildInfo.isForge ? 'Electron Forge' : 'electron-builder';\n              const suggestedCompileCommand = `npx ${\n                appBuildInfo.isForge ? 'electron-forge make' : 'electron-builder build'\n              }`;\n              throw new Error(util.format(APP_NOT_FOUND_ERROR, appBinaryPath, buildToolName, suggestedCompileCommand));\n            }\n          } catch (e) {\n            log.error(e);\n            throw new SevereServiceError((e as Error).message);\n          }\n        }\n\n        cap.browserName = 'chrome';\n        cap['goog:chromeOptions'] = getChromeOptions({ appBinaryPath, appArgs }, cap);\n\n        const chromedriverOptions = getChromedriverOptions(cap);\n        if (!chromiumVersion && Object.keys(chromedriverOptions).length > 0) {\n          cap['wdio:chromedriverOptions'] = chromedriverOptions;\n        }\n\n        const browserVersion = chromiumVersion || cap.browserVersion;\n        if (browserVersion) {\n          cap.browserVersion = browserVersion;\n        } else if (!cap['wdio:chromedriverOptions']?.binary) {\n          const invalidBrowserVersionOptsError = new Error(\n            'You must install Electron locally, or provide a custom Chromedriver path / browserVersion value for each Electron capability',\n          );\n          log.error(invalidBrowserVersionOptsError);\n          throw invalidBrowserVersionOptsError;\n        }\n\n        /**\n         * attach custom capability to be able to identify Electron instances\n         * in the worker process\n         */\n        cap[CUSTOM_CAPABILITY_NAME] = cap[CUSTOM_CAPABILITY_NAME] || {};\n\n        log.debug('setting capability', cap);\n      }),\n    ).catch((err) => {\n      const msg = `Failed setting up Electron session: ${err.stack}`;\n      log.error(msg);\n      throw new SevereServiceError(msg);\n    });\n  }\n}\n"]}