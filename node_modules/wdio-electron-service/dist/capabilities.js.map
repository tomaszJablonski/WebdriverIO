{"version":3,"file":"capabilities.js","sourceRoot":"","sources":["../src/capabilities.ts"],"names":[],"mappings":"AAIA,MAAM,UAAU,gBAAgB,CAAC,OAA+B,EAAE,GAA6B;IAC7F,MAAM,eAAe,GAAG,GAAG,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;IACxD,OAAO;QACL,MAAM,EAAE,OAAO,CAAC,aAAa;QAC7B,WAAW,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC;QAC/B,GAAG,eAAe;QAClB,IAAI,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;KACpE,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,GAA6B;IAClE,MAAM,eAAe,GAAG,GAAG,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;IAC9D,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,GAAG,CAAC,GAAY,EAAE,EAAE,CAAE,GAAgC,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,UAAU,CAAC;AAElH;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,IAAmC;IACzE;;;;;;;OAOG;IACH,MAAM,YAAY,GAAG,IAAgC,CAAC;IACtD,IAAI,OAAO,YAAY,CAAC,WAAW,KAAK,QAAQ,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;QAC7E,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC;IACD;;;;;;;;;OASG;IACH,MAAM,OAAO,GAAI,IAAqC,CAAC,WAAW,CAAC;IACnE,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9E,OAAO,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IACD;;;;;;;;;;;;;;;;OAgBG;IACH,OAAO,MAAM,CAAC,MAAM,CAAC,IAA4C,CAAC;SAC/D,GAAG,CACF,CAAC,OAAO,EAAE,EAAE,CACT,OAAO,CAAC,YAA6C,EAAE,WAAW;QAClE,OAAO,CAAC,YAAyC,CACrD;SACA,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AACxC,CAAC","sourcesContent":["import type { Capabilities } from '@wdio/types';\n\nimport type { ElectronServiceOptions } from './types.js';\n\nexport function getChromeOptions(options: ElectronServiceOptions, cap: WebdriverIO.Capabilities) {\n  const existingOptions = cap['goog:chromeOptions'] || {};\n  return {\n    binary: options.appBinaryPath,\n    windowTypes: ['app', 'webview'],\n    ...existingOptions,\n    args: [...(existingOptions.args || []), ...(options.appArgs || [])],\n  };\n}\n\nexport function getChromedriverOptions(cap: WebdriverIO.Capabilities) {\n  const existingOptions = cap['wdio:chromedriverOptions'] || {};\n  return existingOptions;\n}\n\nconst isElectron = (cap: unknown) => (cap as WebdriverIO.Capabilities)?.browserName?.toLowerCase() === 'electron';\n\n/**\n * Get capability independent of which type of capabilities is set\n */\nexport function getElectronCapabilities(caps: Capabilities.RemoteCapability) {\n  /**\n   * Standard capabilities, e.g.:\n   * ```\n   * {\n   *   browserName: 'chrome'\n   * }\n   * ```\n   */\n  const standardCaps = caps as WebdriverIO.Capabilities;\n  if (typeof standardCaps.browserName === 'string' && isElectron(standardCaps)) {\n    return [caps];\n  }\n  /**\n   * W3C specific capabilities, e.g.:\n   * ```\n   * {\n   *   alwaysMatch: {\n   *     browserName: 'chrome'\n   *   }\n   * }\n   * ```\n   */\n  const w3cCaps = (caps as Capabilities.W3CCapabilities).alwaysMatch;\n  if (w3cCaps && typeof w3cCaps.browserName === 'string' && isElectron(w3cCaps)) {\n    return [w3cCaps];\n  }\n  /**\n   * Multiremote capabilities, e.g.:\n   * ```\n   * {\n   *   instanceA: {\n   *     capabilities: {\n   *        browserName: 'chrome'\n   *     }\n   *   },\n   *   instanceB: {\n   *     capabilities: {\n   *        browserName: 'chrome'\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  return Object.values(caps as Capabilities.MultiRemoteCapabilities)\n    .map(\n      (options) =>\n        (options.capabilities as Capabilities.W3CCapabilities)?.alwaysMatch ||\n        (options.capabilities as WebdriverIO.Capabilities),\n    )\n    .filter((caps) => isElectron(caps));\n}\n"]}