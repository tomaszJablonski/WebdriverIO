{"version":3,"file":"application.js","sourceRoot":"","sources":["../src/application.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'node:fs/promises';\nimport path from 'node:path';\n\nimport { allOfficialArchsForPlatformAndVersion } from '@electron/packager';\nimport type { NormalizedReadResult } from 'read-package-up';\n\nimport log from './log.js';\nimport { APP_NAME_DETECTION_ERROR, BUILD_TOOL_DETECTION_ERROR, MULTIPLE_BUILD_TOOLS_ERROR } from './constants.js';\nimport type { AppBuildInfo, BuilderArch, BuilderConfig, ForgeConfig, ForgeArch } from './types.js';\n\nconst SupportedPlatform = {\n  darwin: 'darwin',\n  linux: 'linux',\n  win32: 'win32',\n};\n\n/**\n * Determine the path to the Electron application binary\n * @param packageJsonPath path to the nearest package.json\n * @param appName name of the application\n * @param buildToolConfig configuration for the detected build tool\n * @param p   process object (used for testing purposes)\n * @returns   path to the Electron app binary\n */\nexport async function getBinaryPath(\n  packageJsonPath: string,\n  appBuildInfo: AppBuildInfo,\n  electronVersion?: string,\n  p = process,\n) {\n  if (!Object.values(SupportedPlatform).includes(p.platform)) {\n    throw new Error(`Unsupported platform: ${p.platform}`);\n  }\n\n  let outDirs: string[];\n\n  if (appBuildInfo.isForge) {\n    // Forge case\n    const archs = allOfficialArchsForPlatformAndVersion(\n      p.platform as keyof typeof SupportedPlatform,\n      electronVersion,\n    ) as ForgeArch[];\n\n    const forgeOutDir = (appBuildInfo.config as ForgeConfig)?.outDir || 'out';\n    outDirs = archs.map((arch) =>\n      path.join(path.dirname(packageJsonPath), forgeOutDir, `${appBuildInfo.appName}-${p.platform}-${arch}`),\n    );\n  } else {\n    // electron-builder case\n    const builderOutDirName = (appBuildInfo.config as BuilderConfig)?.directories?.output || 'dist';\n    const builderOutDirMap = (arch: BuilderArch) => ({\n      darwin: path.join(builderOutDirName, arch === 'x64' ? 'mac' : `mac-${arch}`),\n      linux: path.join(builderOutDirName, 'linux-unpacked'),\n      win32: path.join(builderOutDirName, 'win-unpacked'),\n    });\n\n    if (p.platform === 'darwin') {\n      // macOS output dir depends on the arch used\n      // - we check all of the possible dirs\n      const archs: BuilderArch[] = ['arm64', 'armv7l', 'ia32', 'universal', 'x64'];\n      outDirs = archs.map((arch) =>\n        path.join(path.dirname(packageJsonPath), builderOutDirMap(arch)[p.platform as keyof typeof SupportedPlatform]),\n      );\n    } else {\n      // other platforms have a single output dir which is not dependent on the arch\n      outDirs = [\n        path.join(path.dirname(packageJsonPath), builderOutDirMap('x64')[p.platform as keyof typeof SupportedPlatform]),\n      ];\n    }\n  }\n\n  const binaryPathMap = {\n    darwin: path.join(`${appBuildInfo.appName}.app`, 'Contents', 'MacOS', appBuildInfo.appName),\n    linux: appBuildInfo.appName,\n    win32: `${appBuildInfo.appName}.exe`,\n  };\n  const electronBinaryPath = binaryPathMap[p.platform as keyof typeof SupportedPlatform];\n\n  const binaryPaths = outDirs.map((outDir) => path.join(outDir, electronBinaryPath));\n\n  // for each path, check if it exists and is executable\n  const binaryPathsAccessResults = await Promise.all(\n    binaryPaths.map(async (binaryPath) => {\n      try {\n        await fs.access(binaryPath, fs.constants.X_OK);\n        return true;\n      } catch (e) {\n        log.debug(e);\n        return false;\n      }\n    }),\n  );\n\n  // get the list of executable paths\n  const executableBinaryPaths = binaryPaths.filter((_binaryPath, index) => binaryPathsAccessResults[index]);\n\n  // no executable binary case\n  if (executableBinaryPaths.length === 0) {\n    throw new Error(`No executable binary found, checked: \\n${binaryPaths.join(', \\n')}`);\n  }\n\n  // multiple executable binaries case\n  if (executableBinaryPaths.length > 1) {\n    log.debug(`Detected multiple app binaries, using the first one: \\n${executableBinaryPaths.join(', \\n')}`);\n  }\n\n  return executableBinaryPaths[0];\n}\n\n/**\n * Determine build information about the Electron application\n * @param pkg path to the nearest package.json\n * @returns   promise resolving to the app build information\n */\nexport async function getAppBuildInfo(pkg: NormalizedReadResult): Promise<AppBuildInfo> {\n  const forgeDependencyDetected = Object.keys(pkg.packageJson.devDependencies || {}).includes('@electron-forge/cli');\n  const builderDependencyDetected = Object.keys(pkg.packageJson.devDependencies || {}).includes('electron-builder');\n  const forgePackageJsonConfig = pkg.packageJson.config?.forge;\n  const forgeCustomConfigFile = typeof forgePackageJsonConfig === 'string';\n  const forgeConfigPath = forgeCustomConfigFile ? forgePackageJsonConfig : 'forge.config.js';\n  const rootDir = path.dirname(pkg.path);\n  let forgeConfig = forgePackageJsonConfig as ForgeConfig;\n  let builderConfig: BuilderConfig = pkg.packageJson.build;\n\n  if (!forgePackageJsonConfig || forgeCustomConfigFile) {\n    // if no config or a linked file, attempt to read Forge JS-based config\n    try {\n      log.debug(`Reading Forge config file: ${forgeConfigPath}...`);\n      forgeConfig = ((await import(path.join(rootDir, forgeConfigPath))) as { default: ForgeConfig }).default;\n    } catch (e) {\n      log.debug(e);\n    }\n  }\n\n  const isForge = Boolean(forgeConfig || forgeDependencyDetected);\n\n  if (!isForge) {\n    // if no Forge config or dependency, attempt to read `electron-builder.json`\n    try {\n      log.debug('Forge not detected, reading `electron-builder.json`...');\n      const data = await fs.readFile(path.join(rootDir, 'electron-builder.json'), 'utf-8');\n      builderConfig = JSON.parse(data);\n    } catch (e) {\n      log.debug(e);\n    }\n  }\n\n  const isBuilder = Boolean(builderConfig || builderDependencyDetected);\n\n  if (isForge && isBuilder) {\n    throw new Error(MULTIPLE_BUILD_TOOLS_ERROR);\n  }\n  if (!isForge && !isBuilder) {\n    throw new Error(BUILD_TOOL_DETECTION_ERROR);\n  }\n\n  const config = isForge ? forgeConfig : builderConfig;\n  log.debug(`${isForge ? 'Forge' : 'Builder'} configuration detected: \\n${JSON.stringify(config)}`);\n\n  const appName: string =\n    pkg.packageJson.productName ||\n    (isBuilder && (config as BuilderConfig)?.productName) ||\n    (isForge && (config as ForgeConfig)?.packagerConfig?.name) ||\n    pkg.packageJson.name;\n\n  if (!appName) {\n    throw new Error(APP_NAME_DETECTION_ERROR);\n  }\n\n  return {\n    appName,\n    config,\n    isForge,\n    isBuilder,\n  };\n}\n"]}