var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import logger from '@wdio/logger';
import { PageDecorator, BasePage } from '../utils.js';
import { TitleBar } from '../../index.js';
import { WindowControls as WindowControlsLocators } from '../../locators/1.73.0.js';
const log = logger('wdio-vscode-service');
/**
 * Page object for the windows controls part of the title bar
 *
 * @category Menu
 */
let WindowControls = class WindowControls extends BasePage {
    constructor(locators, element, bar = new TitleBar(locators)) {
        super(locators, element);
        this.bar = bar;
        /**
         * @private
         */
        this.locatorKey = 'WindowControls';
        this.setParentElement(this.bar.elem);
    }
    /**
     * Use the minimize window button
     * @returns Promise resolving when minimize button is pressed
     */
    async minimize() {
        await this.minimize$.click();
    }
    /**
     * Use the maximize window button if the window is not maximized
     * @returns Promise resolving when maximize button is pressed
     */
    async maximize() {
        try {
            await this.maximize$.click();
        }
        catch (err) {
            log.error('Window is already maximized', err);
        }
    }
    /**
     * Use the restore window button if the window is maximized
     * @returns Promise resolving when restore button is pressed
     */
    async restore() {
        try {
            await this.restore$.click();
        }
        catch (err) {
            log.error('Window is not maximized', err);
        }
    }
    /**
     * Use the window close button. Use at your own risk.
     * @returns Promise resolving when close button is pressed
     */
    async close() {
        await this.close$.click();
    }
};
WindowControls = __decorate([
    PageDecorator(WindowControlsLocators)
], WindowControls);
export { WindowControls };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2luZG93Q29udHJvbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvbWVudS9XaW5kb3dDb250cm9scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxPQUFPLE1BQU0sTUFBTSxjQUFjLENBQUE7QUFDakMsT0FBTyxFQUNILGFBQWEsRUFBa0IsUUFBUSxFQUMxQyxNQUFNLGFBQWEsQ0FBQTtBQUNwQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDekMsT0FBTyxFQUFFLGNBQWMsSUFBSSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRW5GLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBR3pDOzs7O0dBSUc7QUFFSSxJQUFNLGNBQWMsR0FBcEIsTUFBTSxjQUFlLFNBQVEsUUFBdUM7SUFNdkUsWUFDSSxRQUEwQixFQUMxQixPQUErRCxFQUN4RCxNQUFnQixJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFFN0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUZqQixRQUFHLEdBQUgsR0FBRyxDQUFtQztRQVJqRDs7V0FFRztRQUNJLGVBQVUsR0FBRyxnQkFBeUIsQ0FBQTtRQVF6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFFBQVE7UUFDVixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxRQUFRO1FBQ1YsSUFBSSxDQUFDO1lBQ0QsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hDLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ1gsR0FBRyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNqRCxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1QsSUFBSSxDQUFDO1lBQ0QsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQy9CLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ1gsR0FBRyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUM3QyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1AsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQzdCLENBQUM7Q0FDSixDQUFBO0FBdERZLGNBQWM7SUFEMUIsYUFBYSxDQUFDLHNCQUFzQixDQUFDO0dBQ3pCLGNBQWMsQ0FzRDFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcbmltcG9ydCB7XG4gICAgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IsIEJhc2VQYWdlLCBWU0NvZGVMb2NhdG9yTWFwXG59IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgVGl0bGVCYXIgfSBmcm9tICcuLi8uLi9pbmRleC5qcydcbmltcG9ydCB7IFdpbmRvd0NvbnRyb2xzIGFzIFdpbmRvd0NvbnRyb2xzTG9jYXRvcnMgfSBmcm9tICcuLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmNvbnN0IGxvZyA9IGxvZ2dlcignd2Rpby12c2NvZGUtc2VydmljZScpXG5cbmV4cG9ydCBpbnRlcmZhY2UgV2luZG93Q29udHJvbHMgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgV2luZG93Q29udHJvbHNMb2NhdG9ycz4ge31cbi8qKlxuICogUGFnZSBvYmplY3QgZm9yIHRoZSB3aW5kb3dzIGNvbnRyb2xzIHBhcnQgb2YgdGhlIHRpdGxlIGJhclxuICpcbiAqIEBjYXRlZ29yeSBNZW51XG4gKi9cbkBQYWdlRGVjb3JhdG9yKFdpbmRvd0NvbnRyb2xzTG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgV2luZG93Q29udHJvbHMgZXh0ZW5kcyBCYXNlUGFnZTx0eXBlb2YgV2luZG93Q29udHJvbHNMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnV2luZG93Q29udHJvbHMnIGFzIGNvbnN0XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBlbGVtZW50PzogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD4gfCBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBiYXI6IFRpdGxlQmFyID0gbmV3IFRpdGxlQmFyKGxvY2F0b3JzKVxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgZWxlbWVudClcbiAgICAgICAgdGhpcy5zZXRQYXJlbnRFbGVtZW50KHRoaXMuYmFyLmVsZW0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoZSBtaW5pbWl6ZSB3aW5kb3cgYnV0dG9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiBtaW5pbWl6ZSBidXR0b24gaXMgcHJlc3NlZFxuICAgICAqL1xuICAgIGFzeW5jIG1pbmltaXplICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5taW5pbWl6ZSQuY2xpY2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgbWF4aW1pemUgd2luZG93IGJ1dHRvbiBpZiB0aGUgd2luZG93IGlzIG5vdCBtYXhpbWl6ZWRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIG1heGltaXplIGJ1dHRvbiBpcyBwcmVzc2VkXG4gICAgICovXG4gICAgYXN5bmMgbWF4aW1pemUgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tYXhpbWl6ZSQuY2xpY2soKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcignV2luZG93IGlzIGFscmVhZHkgbWF4aW1pemVkJywgZXJyKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoZSByZXN0b3JlIHdpbmRvdyBidXR0b24gaWYgdGhlIHdpbmRvdyBpcyBtYXhpbWl6ZWRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIHJlc3RvcmUgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgKi9cbiAgICBhc3luYyByZXN0b3JlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzdG9yZSQuY2xpY2soKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcignV2luZG93IGlzIG5vdCBtYXhpbWl6ZWQnLCBlcnIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIHdpbmRvdyBjbG9zZSBidXR0b24uIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gY2xvc2UgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgKi9cbiAgICBhc3luYyBjbG9zZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2xvc2UkLmNsaWNrKClcbiAgICB9XG59XG4iXX0=