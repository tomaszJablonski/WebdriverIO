var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ViewControl, ActionsControl } from '../index.js';
import { PageDecorator, ElementWithContextMenu } from '../utils.js';
import { ActivityBar as ActivityBarLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the left side activity bar in VS Code
 *
 * @category ActivityBar
 */
let ActivityBar = class ActivityBar extends ElementWithContextMenu {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'ActivityBar';
    }
    /**
     * Find all view containers displayed in the activity bar
     * @returns Promise resolving to array of ViewControl objects
     */
    async getViewControls() {
        const views = [];
        const viewContainer = await this.viewContainer$;
        for (const element of await viewContainer.$$(this.locators.actionItem)) {
            views.push(await new ViewControl(this.locatorMap, 
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            element, this).wait());
        }
        return views;
    }
    /**
     * Find a view container with a given title
     * @param name title of the view
     * @returns Promise resolving to ViewControl object representing the view selector, undefined if not found
     */
    async getViewControl(name) {
        const controls = await this.getViewControls();
        const names = await Promise.all(controls.map(async (item) => item.getTitle()));
        const index = names.findIndex((value) => value.indexOf(name) > -1);
        if (index > -1) {
            return controls[index];
        }
        return undefined;
    }
    /**
     * Returns selected view control
     * @returns Promise resolving to selected ViewControl object
     */
    async getSelectedViewAction() {
        const element = await this.viewContainer$.$(this.locators.actionItemSelected);
        return new ViewControl(this.locatorMap, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        element, this).wait();
    }
    /**
     * Find all global action controls displayed on the bottom of the activity bar
     * @returns Promise resolving to array of ActionsControl objects
     */
    async getGlobalActions() {
        const actions = [];
        const actionContainer = await this.actionsContainer$;
        for (const element of await actionContainer.$$(this.locators.actionItem)) {
            actions.push(await new ActionsControl(this.locatorMap, 
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            element).wait());
        }
        return actions;
    }
    /**
     * Find an action control with a given title
     * @param name title of the global action
     * @returns Promise resolving to ActionsControl object representing the action selector, undefined if not found
     */
    async getGlobalAction(name) {
        const actions = await this.getGlobalActions();
        const names = await Promise.all(actions.map(async (item) => item.getTitle()));
        const index = names.findIndex((value) => value.indexOf(name) > -1);
        if (index > -1) {
            return actions[index];
        }
        return undefined;
    }
};
ActivityBar = __decorate([
    PageDecorator(ActivityBarLocators)
], ActivityBar);
export { ActivityBar };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aXZpdHlCYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvYWN0aXZpdHlCYXIvQWN0aXZpdHlCYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBa0Isc0JBQXNCLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDbkYsT0FBTyxFQUFFLFdBQVcsSUFBSSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRzdFOzs7O0dBSUc7QUFFSSxJQUFNLFdBQVcsR0FBakIsTUFBTSxXQUFZLFNBQVEsc0JBQWtEO0lBQTVFOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGFBQXNCLENBQUE7SUFrRjlDLENBQUM7SUFoRkc7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGVBQWU7UUFDakIsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQTtRQUMvQixNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUE7UUFDL0MsS0FBSyxNQUFNLE9BQU8sSUFBSSxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ3JFLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FDNUIsSUFBSSxDQUFDLFVBQVU7WUFDZixpRUFBaUU7WUFDakUsT0FBYyxFQUNkLElBQUksQ0FDUCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDYixDQUFDO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsY0FBYyxDQUFFLElBQVk7UUFDOUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDN0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUMzQixRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNoRCxDQUFBO1FBQ0QsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDYixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMxQixDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUE7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxxQkFBcUI7UUFDdkIsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDN0UsT0FBTyxJQUFJLFdBQVcsQ0FDbEIsSUFBSSxDQUFDLFVBQVU7UUFDZixpRUFBaUU7UUFDakUsT0FBYyxFQUNkLElBQUksQ0FDUCxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ1osQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxnQkFBZ0I7UUFDbEIsTUFBTSxPQUFPLEdBQXFCLEVBQUUsQ0FBQTtRQUNwQyxNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQTtRQUNwRCxLQUFLLE1BQU0sT0FBTyxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDdkUsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksY0FBYyxDQUNqQyxJQUFJLENBQUMsVUFBVTtZQUNmLGlFQUFpRTtZQUNqRSxPQUFjLENBQ2pCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUNiLENBQUM7UUFDRCxPQUFPLE9BQU8sQ0FBQTtJQUNsQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxlQUFlLENBQUUsSUFBWTtRQUMvQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1FBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDN0UsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDYixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN6QixDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUE7SUFDcEIsQ0FBQztDQUNKLENBQUE7QUF0RlksV0FBVztJQUR2QixhQUFhLENBQUMsbUJBQW1CLENBQUM7R0FDdEIsV0FBVyxDQXNGdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udHJvbCwgQWN0aW9uc0NvbnRyb2wgfSBmcm9tICcuLi9pbmRleC5qcydcbmltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBFbGVtZW50V2l0aENvbnRleHRNZW51IH0gZnJvbSAnLi4vdXRpbHMuanMnXG5pbXBvcnQgeyBBY3Rpdml0eUJhciBhcyBBY3Rpdml0eUJhckxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2aXR5QmFyIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIEFjdGl2aXR5QmFyTG9jYXRvcnM+IHt9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbGVmdCBzaWRlIGFjdGl2aXR5IGJhciBpbiBWUyBDb2RlXG4gKlxuICogQGNhdGVnb3J5IEFjdGl2aXR5QmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKEFjdGl2aXR5QmFyTG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgQWN0aXZpdHlCYXIgZXh0ZW5kcyBFbGVtZW50V2l0aENvbnRleHRNZW51PHR5cGVvZiBBY3Rpdml0eUJhckxvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdBY3Rpdml0eUJhcicgYXMgY29uc3RcblxuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIHZpZXcgY29udGFpbmVycyBkaXNwbGF5ZWQgaW4gdGhlIGFjdGl2aXR5IGJhclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFycmF5IG9mIFZpZXdDb250cm9sIG9iamVjdHNcbiAgICAgKi9cbiAgICBhc3luYyBnZXRWaWV3Q29udHJvbHMgKCk6IFByb21pc2U8Vmlld0NvbnRyb2xbXT4ge1xuICAgICAgICBjb25zdCB2aWV3czogVmlld0NvbnRyb2xbXSA9IFtdXG4gICAgICAgIGNvbnN0IHZpZXdDb250YWluZXIgPSBhd2FpdCB0aGlzLnZpZXdDb250YWluZXIkXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBhd2FpdCB2aWV3Q29udGFpbmVyLiQkKHRoaXMubG9jYXRvcnMuYWN0aW9uSXRlbSkpIHtcbiAgICAgICAgICAgIHZpZXdzLnB1c2goYXdhaXQgbmV3IFZpZXdDb250cm9sKFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRvck1hcCxcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgIGVsZW1lbnQgYXMgYW55LFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICkud2FpdCgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3c1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgYSB2aWV3IGNvbnRhaW5lciB3aXRoIGEgZ2l2ZW4gdGl0bGVcbiAgICAgKiBAcGFyYW0gbmFtZSB0aXRsZSBvZiB0aGUgdmlld1xuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIFZpZXdDb250cm9sIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHZpZXcgc2VsZWN0b3IsIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBhc3luYyBnZXRWaWV3Q29udHJvbCAobmFtZTogc3RyaW5nKTogUHJvbWlzZTxWaWV3Q29udHJvbCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBjb250cm9scyA9IGF3YWl0IHRoaXMuZ2V0Vmlld0NvbnRyb2xzKClcbiAgICAgICAgY29uc3QgbmFtZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIGNvbnRyb2xzLm1hcChhc3luYyAoaXRlbSkgPT4gaXRlbS5nZXRUaXRsZSgpKVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmFtZXMuZmluZEluZGV4KCh2YWx1ZSkgPT4gdmFsdWUuaW5kZXhPZihuYW1lKSA+IC0xKVxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xzW2luZGV4XVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHNlbGVjdGVkIHZpZXcgY29udHJvbFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHNlbGVjdGVkIFZpZXdDb250cm9sIG9iamVjdFxuICAgICAqL1xuICAgIGFzeW5jIGdldFNlbGVjdGVkVmlld0FjdGlvbiAoKTogUHJvbWlzZTxWaWV3Q29udHJvbD4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gYXdhaXQgdGhpcy52aWV3Q29udGFpbmVyJC4kKHRoaXMubG9jYXRvcnMuYWN0aW9uSXRlbVNlbGVjdGVkKVxuICAgICAgICByZXR1cm4gbmV3IFZpZXdDb250cm9sKFxuICAgICAgICAgICAgdGhpcy5sb2NhdG9yTWFwLFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgIGVsZW1lbnQgYXMgYW55LFxuICAgICAgICAgICAgdGhpc1xuICAgICAgICApLndhaXQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIGdsb2JhbCBhY3Rpb24gY29udHJvbHMgZGlzcGxheWVkIG9uIHRoZSBib3R0b20gb2YgdGhlIGFjdGl2aXR5IGJhclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFycmF5IG9mIEFjdGlvbnNDb250cm9sIG9iamVjdHNcbiAgICAgKi9cbiAgICBhc3luYyBnZXRHbG9iYWxBY3Rpb25zICgpOiBQcm9taXNlPEFjdGlvbnNDb250cm9sW10+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uczogQWN0aW9uc0NvbnRyb2xbXSA9IFtdXG4gICAgICAgIGNvbnN0IGFjdGlvbkNvbnRhaW5lciA9IGF3YWl0IHRoaXMuYWN0aW9uc0NvbnRhaW5lciRcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGF3YWl0IGFjdGlvbkNvbnRhaW5lci4kJCh0aGlzLmxvY2F0b3JzLmFjdGlvbkl0ZW0pKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYXdhaXQgbmV3IEFjdGlvbnNDb250cm9sKFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRvck1hcCxcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgIGVsZW1lbnQgYXMgYW55XG4gICAgICAgICAgICApLndhaXQoKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aW9uc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgYW4gYWN0aW9uIGNvbnRyb2wgd2l0aCBhIGdpdmVuIHRpdGxlXG4gICAgICogQHBhcmFtIG5hbWUgdGl0bGUgb2YgdGhlIGdsb2JhbCBhY3Rpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBBY3Rpb25zQ29udHJvbCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBhY3Rpb24gc2VsZWN0b3IsIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBhc3luYyBnZXRHbG9iYWxBY3Rpb24gKG5hbWU6IHN0cmluZyk6IFByb21pc2U8QWN0aW9uc0NvbnRyb2wgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0R2xvYmFsQWN0aW9ucygpXG4gICAgICAgIGNvbnN0IG5hbWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWN0aW9ucy5tYXAoYXN5bmMgKGl0ZW0pID0+IGl0ZW0uZ2V0VGl0bGUoKSkpXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmFtZXMuZmluZEluZGV4KCh2YWx1ZSkgPT4gdmFsdWUuaW5kZXhPZihuYW1lKSA+IC0xKVxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNbaW5kZXhdXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbn1cbiJdfQ==