import { ViewSection } from '../ViewSection.js';
/**
 * Abstract representation of a view section containing a tree
 */
export class TreeSection extends ViewSection {
    async openItem(...path) {
        let items = [];
        for (let i = 0; i < path.length; i += 1) {
            const item = await this.findItem(path[i], i + 1);
            if (await item?.hasChildren() && !await item?.isExpanded()) {
                await item?.expand();
            }
        }
        let currentItem = await this.findItem(path[0], 1);
        for (let i = 0; i < path.length; i += 1) {
            if (!currentItem) {
                if (i === 0) {
                    items = await this.getVisibleItems();
                }
                let names = await Promise.all(items.map((item) => item.getLabel()));
                names = names.sort((a, b) => {
                    if (a > b) {
                        return 1;
                    }
                    if (a < b) {
                        return -1;
                    }
                    return 0;
                });
                const message = names.length < 1
                    ? 'Current directory is empty.'
                    : `Available items in current directory: [${names.toString()}]`;
                throw new Error(`Item '${path[i]}' not found. ${message}`);
            }
            items = await currentItem.getChildren();
            if (items.length < 1) {
                await currentItem.select();
                return items;
            }
            if (i + 1 < path.length) {
                currentItem = undefined;
                for (const item of items) {
                    if (await item.getLabel() === path[i + 1]) {
                        currentItem = item;
                        break;
                    }
                }
            }
        }
        return items;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJlZVNlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci90cmVlL1RyZWVTZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUcvQzs7R0FFRztBQUNILE1BQU0sT0FBZ0IsV0FBWSxTQUFRLFdBQVc7SUFDakQsS0FBSyxDQUFDLFFBQVEsQ0FBRSxHQUFHLElBQWM7UUFDN0IsSUFBSSxLQUFLLEdBQWUsRUFBRSxDQUFBO1FBRTFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUNoRCxJQUFJLE1BQU0sSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQztnQkFDekQsTUFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7WUFDeEIsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ2pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7b0JBQ1YsS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFBO2dCQUN4QyxDQUFDO2dCQUNELElBQUksS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFBO2dCQUNuRSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7d0JBQ1IsT0FBTyxDQUFDLENBQUE7b0JBQ1osQ0FBQztvQkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQzt3QkFDUixPQUFPLENBQUMsQ0FBQyxDQUFBO29CQUNiLENBQUM7b0JBQ0QsT0FBTyxDQUFDLENBQUE7Z0JBQ1osQ0FBQyxDQUFDLENBQUE7Z0JBQ0YsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO29CQUM1QixDQUFDLENBQUMsNkJBQTZCO29CQUMvQixDQUFDLENBQUMsMENBQTBDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFBO2dCQUVuRSxNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsT0FBTyxFQUFFLENBQUMsQ0FBQTtZQUM5RCxDQUFDO1lBQ0QsS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ3ZDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDbkIsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUE7Z0JBQzFCLE9BQU8sS0FBSyxDQUFBO1lBQ2hCLENBQUM7WUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN0QixXQUFXLEdBQUcsU0FBUyxDQUFBO2dCQUN2QixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO29CQUN2QixJQUFJLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQzt3QkFDeEMsV0FBVyxHQUFHLElBQUksQ0FBQTt3QkFDbEIsTUFBSztvQkFDVCxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2hCLENBQUM7Q0FJSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdTZWN0aW9uIH0gZnJvbSAnLi4vVmlld1NlY3Rpb24uanMnXG5pbXBvcnQgeyBUcmVlSXRlbSB9IGZyb20gJy4uL1ZpZXdJdGVtLmpzJ1xuXG4vKipcbiAqIEFic3RyYWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgdmlldyBzZWN0aW9uIGNvbnRhaW5pbmcgYSB0cmVlXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmVlU2VjdGlvbiBleHRlbmRzIFZpZXdTZWN0aW9uIHtcbiAgICBhc3luYyBvcGVuSXRlbSAoLi4ucGF0aDogc3RyaW5nW10pOiBQcm9taXNlPFRyZWVJdGVtW10+IHtcbiAgICAgICAgbGV0IGl0ZW1zOiBUcmVlSXRlbVtdID0gW11cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCB0aGlzLmZpbmRJdGVtKHBhdGhbaV0sIGkgKyAxKVxuICAgICAgICAgICAgaWYgKGF3YWl0IGl0ZW0/Lmhhc0NoaWxkcmVuKCkgJiYgIWF3YWl0IGl0ZW0/LmlzRXhwYW5kZWQoKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGl0ZW0/LmV4cGFuZCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudEl0ZW0gPSBhd2FpdCB0aGlzLmZpbmRJdGVtKHBhdGhbMF0sIDEpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50SXRlbSkge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gYXdhaXQgdGhpcy5nZXRWaXNpYmxlSXRlbXMoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbmFtZXMgPSBhd2FpdCBQcm9taXNlLmFsbChpdGVtcy5tYXAoKGl0ZW0pID0+IGl0ZW0uZ2V0TGFiZWwoKSkpXG4gICAgICAgICAgICAgICAgbmFtZXMgPSBuYW1lcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhID4gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gbmFtZXMubGVuZ3RoIDwgMVxuICAgICAgICAgICAgICAgICAgICA/ICdDdXJyZW50IGRpcmVjdG9yeSBpcyBlbXB0eS4nXG4gICAgICAgICAgICAgICAgICAgIDogYEF2YWlsYWJsZSBpdGVtcyBpbiBjdXJyZW50IGRpcmVjdG9yeTogWyR7bmFtZXMudG9TdHJpbmcoKX1dYFxuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJdGVtICcke3BhdGhbaV19JyBub3QgZm91bmQuICR7bWVzc2FnZX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMgPSBhd2FpdCBjdXJyZW50SXRlbS5nZXRDaGlsZHJlbigpXG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGN1cnJlbnRJdGVtLnNlbGVjdCgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSArIDEgPCBwYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhd2FpdCBpdGVtLmdldExhYmVsKCkgPT09IHBhdGhbaSArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SXRlbSA9IGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zXG4gICAgfVxuXG4gICAgYWJzdHJhY3QgZmluZEl0ZW0gKGxhYmVsOiBzdHJpbmcsIG1heExldmVsPzogbnVtYmVyKTogUHJvbWlzZTxUcmVlSXRlbSB8IHVuZGVmaW5lZD5cbiAgICBhYnN0cmFjdCBnZXRWaXNpYmxlSXRlbXMgKCk6IFByb21pc2U8VHJlZUl0ZW1bXT5cbn1cbiJdfQ==