var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BasePage, PageDecorator } from '../utils.js';
import { WelcomeContent as WelcomeContentLocators } from '../../locators/1.73.0.js';
/**
 * A button that appears in the welcome content and can be clicked to execute a command.
 *
 * To execute the command bound to this button simply run: `await button.click();`.
 *
 * @category Sidebar
 */
let WelcomeContentButton = class WelcomeContentButton extends BasePage {
    /**
     * @param panel  The panel containing the button in the welcome section
     * @param welcomeSection  The enclosing welcome section
     */
    constructor(locators, panel, welcomeSection) {
        super(locators, panel);
        this.welcomeSection = welcomeSection;
        /**
         * @private
         */
        this.locatorKey = 'WelcomeContent';
    }
    /** Return the title displayed on this button */
    getTitle() {
        return this.elem.getText();
    }
};
WelcomeContentButton = __decorate([
    PageDecorator(WelcomeContentLocators)
], WelcomeContentButton);
export { WelcomeContentButton };
/**
 * A section in an empty custom view, see:
 * https://code.visualstudio.com/api/extension-guides/tree-view#welcome-content
 *
 * The welcome section contains two types of elements: text entries and buttons that can be bound to commands.
 * The text sections can be accessed via [[getTextSections]], the buttons on the
 * other hand via [[getButtons]].
 * This however looses the information of the order of the buttons and lines
 * with respect to each other. This can be remedied by using [[getContents]],
 * which returns both in the order that they are found (at the expense, that you
 * now must use typechecks to find out what you got).
 *
 * @category Sidebar
 */
let WelcomeContentSection = class WelcomeContentSection extends BasePage {
    /**
     * @param panel  The panel containing the welcome content.
     * @param parent  The webelement in which the welcome content is embedded.
     */
    constructor(locators, panel, parent) {
        super(locators, panel, parent.elem);
        /**
         * @private
         */
        this.locatorKey = 'WelcomeContent';
    }
    /**
     * Combination of [[getButtons]] and [[getTextSections]]: returns all entries in the welcome
     * view in the order that they appear.
     */
    async getContents() {
        const elements = await this.buttonOrText$$;
        return Promise.all(elements.map(async (e) => {
            const tagName = await e.getTagName();
            if (tagName === 'p') {
                return e.getText();
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            return new WelcomeContentButton(this.locatorMap, e, this);
        }));
    }
    /** Finds all buttons in the welcome content */
    getButtons() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return this.button$$.map((elem) => new WelcomeContentButton(this.locatorMap, elem, this));
    }
    /**
     * Finds all text entries in the welcome content and returns each line as an
     * element in an array.
     */
    getTextSections() {
        return this.text$$.map((elem) => elem.getText());
    }
};
WelcomeContentSection = __decorate([
    PageDecorator(WelcomeContentLocators)
], WelcomeContentSection);
export { WelcomeContentSection };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2VsY29tZUNvbnRlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci9XZWxjb21lQ29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxPQUFPLEVBQ0gsUUFBUSxFQUFFLGFBQWEsRUFDMUIsTUFBTSxhQUFhLENBQUE7QUFDcEIsT0FBTyxFQUFFLGNBQWMsSUFBSSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBR25GOzs7Ozs7R0FNRztBQUVJLElBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQXFCLFNBQVEsUUFBdUM7SUFNN0U7OztPQUdHO0lBQ0gsWUFDSSxRQUEwQixFQUMxQixLQUFtRCxFQUM1QyxjQUFxQztRQUU1QyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRmYsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBWmhEOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGdCQUF5QixDQUFBO0lBWTdDLENBQUM7SUFFRCxnREFBZ0Q7SUFDekMsUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0NBQ0osQ0FBQTtBQXRCWSxvQkFBb0I7SUFEaEMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO0dBQ3pCLG9CQUFvQixDQXNCaEM7O0FBR0Q7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUVJLElBQU0scUJBQXFCLEdBQTNCLE1BQU0scUJBQXNCLFNBQVEsUUFBdUM7SUFNOUU7OztPQUdHO0lBQ0gsWUFDSSxRQUEwQixFQUMxQixLQUFtRCxFQUNuRCxNQUFtQjtRQUVuQixLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFkdkM7O1dBRUc7UUFDSSxlQUFVLEdBQUcsZ0JBQXlCLENBQUE7SUFZN0MsQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxXQUFXO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQTtRQUMxQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7WUFDcEMsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ2xCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1lBQ3RCLENBQUM7WUFFRCxpRUFBaUU7WUFDakUsT0FBTyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBUSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3BFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDUCxDQUFDO0lBRUQsK0NBQStDO0lBQ3hDLFVBQVU7UUFDYixpRUFBaUU7UUFDakUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ3BHLENBQUM7SUFFRDs7O09BR0c7SUFDSSxlQUFlO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7Q0FDSixDQUFBO0FBaERZLHFCQUFxQjtJQURqQyxhQUFhLENBQUMsc0JBQXNCLENBQUM7R0FDekIscUJBQXFCLENBZ0RqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWluYWJsZVByb21pc2VFbGVtZW50IH0gZnJvbSAnd2ViZHJpdmVyaW8nXG5cbmltcG9ydCB7IFZpZXdTZWN0aW9uIH0gZnJvbSAnLi4vaW5kZXguanMnXG5pbXBvcnQge1xuICAgIEJhc2VQYWdlLCBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciwgVlNDb2RlTG9jYXRvck1hcFxufSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7IFdlbGNvbWVDb250ZW50IGFzIFdlbGNvbWVDb250ZW50TG9jYXRvcnMgfSBmcm9tICcuLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgV2VsY29tZUNvbnRlbnRCdXR0b24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgV2VsY29tZUNvbnRlbnRMb2NhdG9ycz4ge31cbi8qKlxuICogQSBidXR0b24gdGhhdCBhcHBlYXJzIGluIHRoZSB3ZWxjb21lIGNvbnRlbnQgYW5kIGNhbiBiZSBjbGlja2VkIHRvIGV4ZWN1dGUgYSBjb21tYW5kLlxuICpcbiAqIFRvIGV4ZWN1dGUgdGhlIGNvbW1hbmQgYm91bmQgdG8gdGhpcyBidXR0b24gc2ltcGx5IHJ1bjogYGF3YWl0IGJ1dHRvbi5jbGljaygpO2AuXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoV2VsY29tZUNvbnRlbnRMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBXZWxjb21lQ29udGVudEJ1dHRvbiBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBXZWxjb21lQ29udGVudExvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdXZWxjb21lQ29udGVudCcgYXMgY29uc3RcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwYW5lbCAgVGhlIHBhbmVsIGNvbnRhaW5pbmcgdGhlIGJ1dHRvbiBpbiB0aGUgd2VsY29tZSBzZWN0aW9uXG4gICAgICogQHBhcmFtIHdlbGNvbWVTZWN0aW9uICBUaGUgZW5jbG9zaW5nIHdlbGNvbWUgc2VjdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIHBhbmVsOiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHVibGljIHdlbGNvbWVTZWN0aW9uOiBXZWxjb21lQ29udGVudFNlY3Rpb25cbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIHBhbmVsKVxuICAgIH1cblxuICAgIC8qKiBSZXR1cm4gdGhlIHRpdGxlIGRpc3BsYXllZCBvbiB0aGlzIGJ1dHRvbiAqL1xuICAgIHB1YmxpYyBnZXRUaXRsZSAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbS5nZXRUZXh0KClcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2VsY29tZUNvbnRlbnRTZWN0aW9uIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIFdlbGNvbWVDb250ZW50TG9jYXRvcnM+IHt9XG4vKipcbiAqIEEgc2VjdGlvbiBpbiBhbiBlbXB0eSBjdXN0b20gdmlldywgc2VlOlxuICogaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vYXBpL2V4dGVuc2lvbi1ndWlkZXMvdHJlZS12aWV3I3dlbGNvbWUtY29udGVudFxuICpcbiAqIFRoZSB3ZWxjb21lIHNlY3Rpb24gY29udGFpbnMgdHdvIHR5cGVzIG9mIGVsZW1lbnRzOiB0ZXh0IGVudHJpZXMgYW5kIGJ1dHRvbnMgdGhhdCBjYW4gYmUgYm91bmQgdG8gY29tbWFuZHMuXG4gKiBUaGUgdGV4dCBzZWN0aW9ucyBjYW4gYmUgYWNjZXNzZWQgdmlhIFtbZ2V0VGV4dFNlY3Rpb25zXV0sIHRoZSBidXR0b25zIG9uIHRoZVxuICogb3RoZXIgaGFuZCB2aWEgW1tnZXRCdXR0b25zXV0uXG4gKiBUaGlzIGhvd2V2ZXIgbG9vc2VzIHRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgb3JkZXIgb2YgdGhlIGJ1dHRvbnMgYW5kIGxpbmVzXG4gKiB3aXRoIHJlc3BlY3QgdG8gZWFjaCBvdGhlci4gVGhpcyBjYW4gYmUgcmVtZWRpZWQgYnkgdXNpbmcgW1tnZXRDb250ZW50c11dLFxuICogd2hpY2ggcmV0dXJucyBib3RoIGluIHRoZSBvcmRlciB0aGF0IHRoZXkgYXJlIGZvdW5kIChhdCB0aGUgZXhwZW5zZSwgdGhhdCB5b3VcbiAqIG5vdyBtdXN0IHVzZSB0eXBlY2hlY2tzIHRvIGZpbmQgb3V0IHdoYXQgeW91IGdvdCkuXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoV2VsY29tZUNvbnRlbnRMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBXZWxjb21lQ29udGVudFNlY3Rpb24gZXh0ZW5kcyBCYXNlUGFnZTx0eXBlb2YgV2VsY29tZUNvbnRlbnRMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnV2VsY29tZUNvbnRlbnQnIGFzIGNvbnN0XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcGFuZWwgIFRoZSBwYW5lbCBjb250YWluaW5nIHRoZSB3ZWxjb21lIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHBhcmVudCAgVGhlIHdlYmVsZW1lbnQgaW4gd2hpY2ggdGhlIHdlbGNvbWUgY29udGVudCBpcyBlbWJlZGRlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBwYW5lbDogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD4sXG4gICAgICAgIHBhcmVudDogVmlld1NlY3Rpb25cbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIHBhbmVsLCBwYXJlbnQuZWxlbSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21iaW5hdGlvbiBvZiBbW2dldEJ1dHRvbnNdXSBhbmQgW1tnZXRUZXh0U2VjdGlvbnNdXTogcmV0dXJucyBhbGwgZW50cmllcyBpbiB0aGUgd2VsY29tZVxuICAgICAqIHZpZXcgaW4gdGhlIG9yZGVyIHRoYXQgdGhleSBhcHBlYXIuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldENvbnRlbnRzICgpOiBQcm9taXNlPChXZWxjb21lQ29udGVudEJ1dHRvbiB8IHN0cmluZylbXT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMuYnV0dG9uT3JUZXh0JCRcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGVsZW1lbnRzLm1hcChhc3luYyAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IGF3YWl0IGUuZ2V0VGFnTmFtZSgpXG4gICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuZ2V0VGV4dCgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdlbGNvbWVDb250ZW50QnV0dG9uKHRoaXMubG9jYXRvck1hcCwgZSBhcyBhbnksIHRoaXMpXG4gICAgICAgIH0pKVxuICAgIH1cblxuICAgIC8qKiBGaW5kcyBhbGwgYnV0dG9ucyBpbiB0aGUgd2VsY29tZSBjb250ZW50ICovXG4gICAgcHVibGljIGdldEJ1dHRvbnMgKCk6IFByb21pc2U8V2VsY29tZUNvbnRlbnRCdXR0b25bXT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b24kJC5tYXAoKGVsZW0pID0+IG5ldyBXZWxjb21lQ29udGVudEJ1dHRvbih0aGlzLmxvY2F0b3JNYXAsIGVsZW0gYXMgYW55LCB0aGlzKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbGwgdGV4dCBlbnRyaWVzIGluIHRoZSB3ZWxjb21lIGNvbnRlbnQgYW5kIHJldHVybnMgZWFjaCBsaW5lIGFzIGFuXG4gICAgICogZWxlbWVudCBpbiBhbiBhcnJheS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VGV4dFNlY3Rpb25zICgpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQkJC5tYXAoKGVsZW0pID0+IGVsZW0uZ2V0VGV4dCgpKVxuICAgIH1cbn1cbiJdfQ==