var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ViewItem } from '../ViewItem.js';
import { PageDecorator } from '../../utils.js';
import { TreeItem as TreeItemLocators, ExtensionsViewItem as ExtensionsViewItemLocators } from '../../../locators/1.73.0.js';
/**
 * Page object representing an extension in the extensions view
 *
 * @category Sidebar
 */
let ExtensionsViewItem = class ExtensionsViewItem extends ViewItem {
    constructor(locators, extensionElement, section) {
        super(locators, extensionElement, section.elem);
        this.section = section;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'ExtensionsViewItem'];
    }
    /**
     * Get title of the extension
     */
    async getTitle() {
        return this.itemTitle$.getText();
    }
    /**
     * Get version of the extension
     * @returns Promise resolving to version string
     */
    async getVersion() {
        const version = await this.version$$;
        if (version.length > 0) {
            return version[0].getText();
        }
        const label = await this.elem.getAttribute('aria-label');
        const ver = label.split(',')[1].trim();
        return ver;
    }
    /**
     * Get the author of the extension
     * @returns Promise resolving to displayed author
     */
    async getAuthor() {
        const author = await this.author$;
        return author.getText();
    }
    /**
     * Get the description of the extension
     * @returns Promise resolving to description
     */
    async getDescription() {
        return this.description$.getText();
    }
    /**
     * Find if the extension is installed
     * @returns Promise resolving to true/false
     */
    async isInstalled() {
        if ((await this.install$.getAttribute('class')).indexOf('disabled') > -1) {
            return true;
        }
        return false;
    }
    /**
     * Open the management context menu if the extension is installed
     * @returns Promise resolving to ContextMenu object
     */
    async manage() {
        if ((await this.manage$.getAttribute('class')).indexOf('disabled') > -1) {
            throw new Error(`Extension '${await this.getTitle()}' is not installed`);
        }
        return this.openContextMenu();
    }
    /**
     * Install the extension if not installed already.
     *
     * Will wait for the extension to finish installing. To skip the wait, set timeout to 0.
     *
     * @param timeout timeout to wait for the installation in milliseconds, default unlimited, set to 0 to skip waiting
     * @returns Promise resolving when the installation finishes or is skipped
     */
    async install(timeout = 300000) {
        if (await this.isInstalled()) {
            return;
        }
        const button = await this.install$;
        await button.click();
        if (timeout > 0) {
            await this.manage$.waitForDisplayed({ timeout });
        }
    }
};
ExtensionsViewItem = __decorate([
    PageDecorator({ ...TreeItemLocators, ...ExtensionsViewItemLocators })
], ExtensionsViewItem);
export { ExtensionsViewItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uc1ZpZXdJdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvZXh0ZW5zaW9ucy9FeHRlbnNpb25zVmlld0l0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQTtBQUkzRCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLGdCQUFnQixDQUFBO0FBQ2hGLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGtCQUFrQixJQUFJLDBCQUEwQixFQUNuRCxNQUFNLDZCQUE2QixDQUFBO0FBR3BDOzs7O0dBSUc7QUFFSSxJQUFNLGtCQUFrQixHQUF4QixNQUFNLGtCQUFtQixTQUFRLFFBQVE7SUFNNUMsWUFDSSxRQUEwQixFQUMxQixnQkFBOEQsRUFDdkQsT0FBOEI7UUFFckMsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFGeEMsWUFBTyxHQUFQLE9BQU8sQ0FBdUI7UUFSekM7O1dBRUc7UUFDSSxlQUFVLEdBQUcsQ0FBQyxVQUFtQixFQUFFLG9CQUE2QixDQUFDLENBQUE7SUFReEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ1osTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ3BDLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNyQixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUMvQixDQUFDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN4RCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO1FBRXRDLE9BQU8sR0FBRyxDQUFBO0lBQ2QsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxTQUFTO1FBQ1gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ2pDLE9BQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxXQUFXO1FBQ2IsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN2RSxPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLE1BQU07UUFDUixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3RFLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtRQUM1RSxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDakMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFFLE9BQU8sR0FBRyxNQUFNO1FBQzNCLElBQUksTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztZQUMzQixPQUFNO1FBQ1YsQ0FBQztRQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUNsQyxNQUFNLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUVwQixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNkLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDcEQsQ0FBQztJQUNMLENBQUM7Q0FDSixDQUFBO0FBOUZZLGtCQUFrQjtJQUQ5QixhQUFhLENBQUMsRUFBRSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztHQUN6RCxrQkFBa0IsQ0E4RjlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBWaWV3SXRlbSwgVmlld0l0ZW1Mb2NhdG9ycyB9IGZyb20gJy4uL1ZpZXdJdGVtLmpzJ1xuaW1wb3J0IHsgQ29udGV4dE1lbnUgfSBmcm9tICcuLi8uLi9tZW51L0NvbnRleHRNZW51LmpzJ1xuaW1wb3J0IHsgRXh0ZW5zaW9uc1ZpZXdTZWN0aW9uIH0gZnJvbSAnLi9FeHRlbnNpb25zVmlld1NlY3Rpb24uanMnXG5cbmltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBWU0NvZGVMb2NhdG9yTWFwIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnXG5pbXBvcnQge1xuICAgIFRyZWVJdGVtIGFzIFRyZWVJdGVtTG9jYXRvcnMsXG4gICAgRXh0ZW5zaW9uc1ZpZXdJdGVtIGFzIEV4dGVuc2lvbnNWaWV3SXRlbUxvY2F0b3JzXG59IGZyb20gJy4uLy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbnNpb25zVmlld0l0ZW0gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxWaWV3SXRlbUxvY2F0b3JzPiB7IH1cbi8qKlxuICogUGFnZSBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGV4dGVuc2lvbiBpbiB0aGUgZXh0ZW5zaW9ucyB2aWV3XG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoeyAuLi5UcmVlSXRlbUxvY2F0b3JzLCAuLi5FeHRlbnNpb25zVmlld0l0ZW1Mb2NhdG9ycyB9KVxuZXhwb3J0IGNsYXNzIEV4dGVuc2lvbnNWaWV3SXRlbSBleHRlbmRzIFZpZXdJdGVtIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gWydUcmVlSXRlbScgYXMgY29uc3QsICdFeHRlbnNpb25zVmlld0l0ZW0nIGFzIGNvbnN0XVxuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgZXh0ZW5zaW9uRWxlbWVudDogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD4sXG4gICAgICAgIHB1YmxpYyBzZWN0aW9uOiBFeHRlbnNpb25zVmlld1NlY3Rpb25cbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIGV4dGVuc2lvbkVsZW1lbnQsIHNlY3Rpb24uZWxlbSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGl0bGUgb2YgdGhlIGV4dGVuc2lvblxuICAgICAqL1xuICAgIGFzeW5jIGdldFRpdGxlICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtVGl0bGUkLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB2ZXJzaW9uIG9mIHRoZSBleHRlbnNpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB2ZXJzaW9uIHN0cmluZ1xuICAgICAqL1xuICAgIGFzeW5jIGdldFZlcnNpb24gKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHZlcnNpb24gPSBhd2FpdCB0aGlzLnZlcnNpb24kJFxuICAgICAgICBpZiAodmVyc2lvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmVyc2lvblswXS5nZXRUZXh0KClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbCA9IGF3YWl0IHRoaXMuZWxlbS5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKVxuICAgICAgICBjb25zdCB2ZXIgPSBsYWJlbC5zcGxpdCgnLCcpWzFdLnRyaW0oKVxuXG4gICAgICAgIHJldHVybiB2ZXJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGF1dGhvciBvZiB0aGUgZXh0ZW5zaW9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gZGlzcGxheWVkIGF1dGhvclxuICAgICAqL1xuICAgIGFzeW5jIGdldEF1dGhvciAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgdGhpcy5hdXRob3IkXG4gICAgICAgIHJldHVybiBhdXRob3IuZ2V0VGV4dCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXh0ZW5zaW9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBhc3luYyBnZXREZXNjcmlwdGlvbiAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24kLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgaWYgdGhlIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0cnVlL2ZhbHNlXG4gICAgICovXG4gICAgYXN5bmMgaXNJbnN0YWxsZWQgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAoKGF3YWl0IHRoaXMuaW5zdGFsbCQuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5pbmRleE9mKCdkaXNhYmxlZCcpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgbWFuYWdlbWVudCBjb250ZXh0IG1lbnUgaWYgdGhlIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBDb250ZXh0TWVudSBvYmplY3RcbiAgICAgKi9cbiAgICBhc3luYyBtYW5hZ2UgKCk6IFByb21pc2U8Q29udGV4dE1lbnU+IHtcbiAgICAgICAgaWYgKChhd2FpdCB0aGlzLm1hbmFnZSQuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5pbmRleE9mKCdkaXNhYmxlZCcpID4gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXh0ZW5zaW9uICcke2F3YWl0IHRoaXMuZ2V0VGl0bGUoKX0nIGlzIG5vdCBpbnN0YWxsZWRgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5Db250ZXh0TWVudSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zdGFsbCB0aGUgZXh0ZW5zaW9uIGlmIG5vdCBpbnN0YWxsZWQgYWxyZWFkeS5cbiAgICAgKlxuICAgICAqIFdpbGwgd2FpdCBmb3IgdGhlIGV4dGVuc2lvbiB0byBmaW5pc2ggaW5zdGFsbGluZy4gVG8gc2tpcCB0aGUgd2FpdCwgc2V0IHRpbWVvdXQgdG8gMC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aW1lb3V0IHRpbWVvdXQgdG8gd2FpdCBmb3IgdGhlIGluc3RhbGxhdGlvbiBpbiBtaWxsaXNlY29uZHMsIGRlZmF1bHQgdW5saW1pdGVkLCBzZXQgdG8gMCB0byBza2lwIHdhaXRpbmdcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIHRoZSBpbnN0YWxsYXRpb24gZmluaXNoZXMgb3IgaXMgc2tpcHBlZFxuICAgICAqL1xuICAgIGFzeW5jIGluc3RhbGwgKHRpbWVvdXQgPSAzMDAwMDApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNJbnN0YWxsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnV0dG9uID0gYXdhaXQgdGhpcy5pbnN0YWxsJFxuICAgICAgICBhd2FpdCBidXR0b24uY2xpY2soKVxuXG4gICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tYW5hZ2UkLndhaXRGb3JEaXNwbGF5ZWQoeyB0aW1lb3V0IH0pXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=