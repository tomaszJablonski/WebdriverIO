var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ContextMenu, WelcomeContentSection } from '../index.js';
import { PageDecorator, BasePage, ElementWithContextMenu } from '../utils.js';
import { ViewSection as ViewSectionLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing a collapsible content section of the side bar view
 *
 * @category Sidebar
 */
export class ViewSection extends BasePage {
    constructor(locators, panel, content) {
        super(locators, panel);
        this.content = content;
    }
    /**
     * Get the title of the section as string
     * @returns Promise resolving to section title
     */
    async getTitle() {
        return this.title$.getAttribute(this.locators.titleText);
    }
    /**
     * Expand the section if collapsed
     * @returns Promise resolving when the section is expanded
     */
    async expand() {
        if (await this.isHeaderHidden()) {
            return;
        }
        if (!await this.isExpanded()) {
            const panel = await this.header$;
            await panel.click();
            await browser.waitUntil(async () => (await panel.getAttribute(this.locators.headerExpanded) === 'true'), { timeout: 1000 });
        }
    }
    /**
     * Collapse the section if expanded
     * @returns Promise resolving when the section is collapsed
     */
    async collapse() {
        if (await this.isHeaderHidden()) {
            return;
        }
        if (await this.isExpanded()) {
            const panel = await this.header$;
            await panel.click();
            await browser.waitUntil(async () => (await panel.getAttribute(this.locators.headerExpanded) === 'false'), { timeout: 1000 });
        }
    }
    /**
     * Finds whether the section is expanded
     * @returns Promise resolving to true/false
     */
    async isExpanded() {
        const expanded = await this.header$.getAttribute(this.locators.headerExpanded);
        return expanded === 'true';
    }
    /**
     * Finds [Welcome Content](https://code.visualstudio.com/api/extension-guides/tree-view#welcome-content)
     * present in this ViewSection and returns it. If none is found, then `undefined` is returned
     *
     */
    async findWelcomeContent() {
        try {
            const res = await this.welcomeContent$;
            if (!await res.isDisplayed()) {
                return undefined;
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            return new WelcomeContentSection(this.locatorMap, res, this);
        }
        catch (_err) {
            return undefined;
        }
    }
    /**
     * Retrieve the action buttons on the section's header
     * @returns Promise resolving to array of ViewPanelAction objects
     */
    async getActions() {
        const actions = [];
        if (!await this.isHeaderHidden()) {
            const elements = await this
                .header$
                .$(this.locators.actions)
                .$$(this.locators.button);
            for (const element of elements) {
                actions.push(await new ViewPanelAction(this.locatorMap, 
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                element, this).wait());
            }
        }
        return actions;
    }
    /**
     * Retrieve an action button on the sections's header by its label
     * @param label label/title of the button
     * @returns ViewPanelAction object if found, undefined otherwise
     */
    async getAction(label) {
        const actions = await this.getActions();
        for (const action of actions) {
            if (await action.getLabel() === label) {
                return action;
            }
        }
        return undefined;
    }
    /**
     * Click on the More Actions... item if it exists
     *
     * @returns ContextMenu page object if the action succeeds, undefined otherwise
     */
    async moreActions() {
        const more = await this.getAction('More Actions...');
        if (!more) {
            return undefined;
        }
        const section = this;
        const self = this;
        const btn = new class extends ElementWithContextMenu {
            constructor() {
                super(...arguments);
                this.locatorKey = 'ViewSection';
            }
            async openContextMenu() {
                await this.elem.click();
                const shadowRootHost = await section.elem.$$('.shadow-root-host');
                if (shadowRootHost.length > 0) {
                    const shadowRoot = $(await browser.execute('return arguments[0].shadowRoot', shadowRootHost[0]));
                    return new ContextMenu(self.locatorMap, shadowRoot).wait();
                }
                return super.openContextMenu();
            }
        }(this.locatorMap, more.elem, this.elem);
        return btn.openContextMenu();
    }
    async isHeaderHidden() {
        return (await this.header$.getAttribute('class')).indexOf('hidden') > -1;
    }
}
/**
 * Action button on the header of a view section
 *
 * @category Sidebar
 */
let ViewPanelAction = class ViewPanelAction extends BasePage {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        /**
         * @private
         */
        this.locatorKey = 'ViewSection';
    }
    /**
     * Get label of the action button
     */
    async getLabel() {
        return this.elem.getAttribute(this.locators.buttonLabel);
    }
    async wait(timeout = 1000) {
        await this.elem.waitForEnabled({ timeout });
        return this;
    }
};
ViewPanelAction = __decorate([
    PageDecorator(ViewSectionLocators)
], ViewPanelAction);
export { ViewPanelAction };
//# sourceMappingURL=data:application/json;base64,