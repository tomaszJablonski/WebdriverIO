var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ElementWithContextMenu, PageDecorator, BasePage } from '../utils.js';
import { SideBarView } from '../index.js';
import { ViewTitlePart as ViewTitlePartLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the top (title) part of a side bar view
 *
 * @category Sidebar
 */
let ViewTitlePart = class ViewTitlePart extends ElementWithContextMenu {
    constructor(locators, view = new SideBarView(locators)) {
        super(locators);
        this.view = view;
        /**
         * @private
         */
        this.locatorKey = 'ViewTitlePart';
    }
    /**
     * Returns the displayed title of the view
     * @returns Promise resolving to displayed title
     */
    async getTitle() {
        return this.title$.getText();
    }
    /**
     * Finds action buttons inside the view title part
     * @returns Promise resolving to array of TitleActionButton objects
     */
    async getActions() {
        const actions = [];
        const elements = await this.action$$;
        for (const element of elements) {
            const title = await element.getAttribute(this.locators.actionLabel);
            const link = element.$(this.locators.actionContstructor(title));
            actions.push(await new TitleActionButton(this.locatorMap, link, title, this).wait());
        }
        return actions;
    }
    /**
     * Finds an action button by title
     * @param title title of the button to search for
     * @returns Promise resolving to TitleActionButton object
     */
    async getAction(title) {
        const link = this.elem.$(this.locators.actionContstructor(title));
        return new TitleActionButton(this.locatorMap, link, title, this).wait();
    }
};
ViewTitlePart = __decorate([
    PageDecorator(ViewTitlePartLocators)
], ViewTitlePart);
export { ViewTitlePart };
/**
 * Page object representing a button inside the view title part
 *
 * @category Sidebar
 */
let TitleActionButton = class TitleActionButton extends BasePage {
    constructor(locators, elem, title, viewTitle) {
        super(locators, elem, viewTitle.elem);
        this.title = title;
        /**
         * @private
         */
        this.locatorKey = 'ViewTitlePart';
        this.title = title;
    }
    /**
     * Get title of the button
     */
    getTitle() {
        return this.title;
    }
};
TitleActionButton = __decorate([
    PageDecorator(ViewTitlePartLocators)
], TitleActionButton);
export { TitleActionButton };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld1RpdGxlUGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9zaWRlYmFyL1ZpZXdUaXRsZVBhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUNILHNCQUFzQixFQUFFLGFBQWEsRUFBa0IsUUFBUSxFQUNsRSxNQUFNLGFBQWEsQ0FBQTtBQUNwQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLElBQUkscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUdqRjs7OztHQUlHO0FBRUksSUFBTSxhQUFhLEdBQW5CLE1BQU0sYUFBYyxTQUFRLHNCQUFvRDtJQU1uRixZQUNJLFFBQTBCLEVBQ25CLE9BQXlCLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUV6RCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFGUixTQUFJLEdBQUosSUFBSSxDQUE4QztRQVA3RDs7V0FFRztRQUNJLGVBQVUsR0FBRyxlQUF3QixDQUFBO0lBTzVDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDWixNQUFNLE9BQU8sR0FBd0IsRUFBRSxDQUFBO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUNwQyxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQzdCLE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQ25FLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1lBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ3hGLENBQUM7UUFDRCxPQUFPLE9BQU8sQ0FBQTtJQUNsQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxTQUFTLENBQUUsS0FBYTtRQUMxQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFDakUsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUMzRSxDQUFDO0NBQ0osQ0FBQTtBQTdDWSxhQUFhO0lBRHpCLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQztHQUN4QixhQUFhLENBNkN6Qjs7QUFHRDs7OztHQUlHO0FBRUksSUFBTSxpQkFBaUIsR0FBdkIsTUFBTSxpQkFBa0IsU0FBUSxRQUFzQztJQU16RSxZQUNJLFFBQTBCLEVBQzFCLElBQWtELEVBQzFDLEtBQWEsRUFDckIsU0FBd0I7UUFFeEIsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBSDdCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFSekI7O1dBRUc7UUFDSSxlQUFVLEdBQUcsZUFBd0IsQ0FBQTtRQVN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ3JCLENBQUM7Q0FDSixDQUFBO0FBdEJZLGlCQUFpQjtJQUQ3QixhQUFhLENBQUMscUJBQXFCLENBQUM7R0FDeEIsaUJBQWlCLENBc0I3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcbmltcG9ydCB7XG4gICAgRWxlbWVudFdpdGhDb250ZXh0TWVudSwgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IsIEJhc2VQYWdlLCBWU0NvZGVMb2NhdG9yTWFwXG59IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgU2lkZUJhclZpZXcgfSBmcm9tICcuLi9pbmRleC5qcydcbmltcG9ydCB7IFZpZXdUaXRsZVBhcnQgYXMgVmlld1RpdGxlUGFydExvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdUaXRsZVBhcnQgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgVmlld1RpdGxlUGFydExvY2F0b3JzPiB7IH1cbi8qKlxuICogUGFnZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB0b3AgKHRpdGxlKSBwYXJ0IG9mIGEgc2lkZSBiYXIgdmlld1xuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFZpZXdUaXRsZVBhcnRMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBWaWV3VGl0bGVQYXJ0IGV4dGVuZHMgRWxlbWVudFdpdGhDb250ZXh0TWVudTx0eXBlb2YgVmlld1RpdGxlUGFydExvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdWaWV3VGl0bGVQYXJ0JyBhcyBjb25zdFxuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgcHVibGljIHZpZXc6IFNpZGVCYXJWaWV3PGFueT4gPSBuZXcgU2lkZUJhclZpZXcobG9jYXRvcnMpXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRpc3BsYXllZCB0aXRsZSBvZiB0aGUgdmlld1xuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGRpc3BsYXllZCB0aXRsZVxuICAgICAqL1xuICAgIGFzeW5jIGdldFRpdGxlICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy50aXRsZSQuZ2V0VGV4dCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgYWN0aW9uIGJ1dHRvbnMgaW5zaWRlIHRoZSB2aWV3IHRpdGxlIHBhcnRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBhcnJheSBvZiBUaXRsZUFjdGlvbkJ1dHRvbiBvYmplY3RzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWN0aW9ucyAoKTogUHJvbWlzZTxUaXRsZUFjdGlvbkJ1dHRvbltdPiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbnM6IFRpdGxlQWN0aW9uQnV0dG9uW10gPSBbXVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMuYWN0aW9uJCRcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IGF3YWl0IGVsZW1lbnQuZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvcnMuYWN0aW9uTGFiZWwpXG4gICAgICAgICAgICBjb25zdCBsaW5rID0gZWxlbWVudC4kKHRoaXMubG9jYXRvcnMuYWN0aW9uQ29udHN0cnVjdG9yKHRpdGxlKSlcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhd2FpdCBuZXcgVGl0bGVBY3Rpb25CdXR0b24odGhpcy5sb2NhdG9yTWFwLCBsaW5rLCB0aXRsZSwgdGhpcykud2FpdCgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgYW4gYWN0aW9uIGJ1dHRvbiBieSB0aXRsZVxuICAgICAqIEBwYXJhbSB0aXRsZSB0aXRsZSBvZiB0aGUgYnV0dG9uIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBUaXRsZUFjdGlvbkJ1dHRvbiBvYmplY3RcbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY3Rpb24gKHRpdGxlOiBzdHJpbmcpOiBQcm9taXNlPFRpdGxlQWN0aW9uQnV0dG9uPiB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmVsZW0uJCh0aGlzLmxvY2F0b3JzLmFjdGlvbkNvbnRzdHJ1Y3Rvcih0aXRsZSkpXG4gICAgICAgIHJldHVybiBuZXcgVGl0bGVBY3Rpb25CdXR0b24odGhpcy5sb2NhdG9yTWFwLCBsaW5rLCB0aXRsZSwgdGhpcykud2FpdCgpXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdUaXRsZVBhcnQgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgVmlld1RpdGxlUGFydExvY2F0b3JzPiB7IH1cbi8qKlxuICogUGFnZSBvYmplY3QgcmVwcmVzZW50aW5nIGEgYnV0dG9uIGluc2lkZSB0aGUgdmlldyB0aXRsZSBwYXJ0XG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoVmlld1RpdGxlUGFydExvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIFRpdGxlQWN0aW9uQnV0dG9uIGV4dGVuZHMgQmFzZVBhZ2U8dHlwZW9mIFZpZXdUaXRsZVBhcnRMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnVmlld1RpdGxlUGFydCcgYXMgY29uc3RcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIGVsZW06IENoYWluYWJsZVByb21pc2VFbGVtZW50PFdlYmRyaXZlcklPLkVsZW1lbnQ+LFxuICAgICAgICBwcml2YXRlIHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIHZpZXdUaXRsZTogVmlld1RpdGxlUGFydFxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgZWxlbSwgdmlld1RpdGxlLmVsZW0pXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aXRsZSBvZiB0aGUgYnV0dG9uXG4gICAgICovXG4gICAgZ2V0VGl0bGUgKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpdGxlXG4gICAgfVxufVxuIl19