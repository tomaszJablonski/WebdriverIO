var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BottomBarPanel } from '../index.js';
import { BasePage, ElementWithContextMenu, PageDecorator } from '../utils.js';
import { ProblemsView as ProblemsViewLocators, Marker as MarkerLocators } from '../../locators/1.73.0.js';
/**
 * Problems view in the bottom panel.
 *
 * ```ts
 * const bottomBar = workbench.getBottomBar()
 * const outputView = await bottomBar.openProblemsView()
 * console.log(await outputView.setFilter('Error'))
 * ```
 *
 * @category BottomBar
 */
let ProblemsView = class ProblemsView extends BasePage {
    constructor(locators, panel = new BottomBarPanel(locators)) {
        super(locators);
        this.panel = panel;
        /**
         * @private
         */
        this.locatorKey = 'ProblemsView';
        this.setParentElement(this.panel.elem);
    }
    /**
     * Set the filter using the input box on the problems view
     * @param pattern filter to use, preferably a glob pattern
     * @returns Promise resolving when the filter pattern is filled in
     */
    async setFilter(pattern) {
        const filterField = await this.clearFilter();
        await filterField.setValue(pattern);
    }
    /**
     * Clear all filters
     * @returns Promise resolving to the filter field WebElement
     */
    async clearFilter() {
        const filterField = await this.panel.elem
            .$(this.locatorMap.BottomBarPanel.actions)
            .$(this.locators.markersFilter)
            .$(this.locators.input);
        await filterField.clearValue();
        return filterField;
    }
    /**
     * Collapse all collapsible markers in the problems view
     * @returns Promise resolving when the collapse all button is pressed
     */
    async collapseAll() {
        const button = await this.panel.elem
            .$(this.locatorMap.BottomBarPanel.actions)
            .$(this.locators.collapseAll);
        await button.click();
    }
    /**
     * @deprecated The method should not be used and getAllVisibleMarkers() should be used instead.
     */
    async getAllMarkers() {
        return this.getAllVisibleMarkers(MarkerType.Any);
    }
    /**
     * Get all visible markers from the problems view with the given type.
     * Warning: this only returns the markers that are visible, and not the
     * entire list, so calls to this function may change depending on the
     * environment  in which the tests are running in.
     * To get all markers regardless of type, use MarkerType.Any
     * @param type type of markers to retrieve
     * @returns Promise resolving to array of Marker objects
     */
    async getAllVisibleMarkers(type) {
        const markers = [];
        const elements = await this.markerRow$$;
        for (const element of elements) {
            const isExpandable = typeof (await element.getAttribute('aria-expanded')) === 'string';
            if (isExpandable) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                const marker = await new Marker(this.locatorMap, element, this).wait();
                if (type === MarkerType.Any || type === await marker.getType()) {
                    markers.push(marker);
                }
                continue;
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            markers[markers.length - 1].problems.push(new Problem(this.locatorMap, element));
        }
        return markers;
    }
    /**
     * Gets the count badge
     * @returns Promise resolving to the WebElement representing the count badge
     */
    getCountBadge() {
        return this.changeCount$;
    }
};
ProblemsView = __decorate([
    PageDecorator(ProblemsViewLocators)
], ProblemsView);
export { ProblemsView };
/**
 * Page object for marker in problems view
 *
 * @category BottomBar
 */
let Marker = class Marker extends ElementWithContextMenu {
    constructor(locators, element, view) {
        super(locators, element, view.elem);
        this.view = view;
        /**
         * @private
         */
        this.locatorKey = 'Marker';
        this.problems = [];
    }
    /**
     * Get the type of the marker
     * Possible types are: File, Error, Warning
     * @returns Promise resolving to a MarkerType
     */
    async getType() {
        const twist = await this.elem.$(this.locatorMap.ProblemsView.markerTwistie);
        if ((await twist.getAttribute('class')).indexOf('collapsible') > -1) {
            return MarkerType.File;
        }
        const text = await this.getText();
        if (text.startsWith('Error')) {
            return MarkerType.Error;
        }
        return MarkerType.Warning;
    }
    /**
     * Get the name of the file that has problems
     * @returns name of file containing problems
     */
    getFileName() {
        return this.fileName$.getText();
    }
    /**
     * Get the error count of the file that has problems
     * @returns error count of file containing problems
     */
    getProblemCount() {
        return this.problemCount$.getText();
    }
    /**
     * Get the full text of the marker
     * @returns Promise resolving to marker text
     */
    async getText() {
        return this.elem.getAttribute(this.locators.rowLabel);
    }
    /**
     * Expand/Collapse the marker if possible
     * @param expand true to expand, false to collapse
     * @returns Promise resolving when the expand/collapse twistie is clicked
     */
    async toggleExpand(expand) {
        const klass = await this.markerTwistie$.getAttribute('class');
        if ((klass.indexOf('collapsed') > -1) === expand) {
            await this.elem.click();
        }
    }
};
Marker = __decorate([
    PageDecorator(MarkerLocators)
], Marker);
export { Marker };
/**
 * Page object for marker in problems view
 *
 * @category BottomBar
 */
let Problem = class Problem extends ElementWithContextMenu {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Marker';
    }
    /**
     * Problem details
     * @returns problem description
     */
    getText() {
        return this.detailsText$.getText();
    }
    /**
     * Type of file where the problem is located
     * @returns source file type
     */
    getSource() {
        return this.detailsSource$.getText();
    }
    /**
     * Location problem
     * @returns location of error as Array [line, column]
     */
    async getLocation() {
        const locationText = await this.detailsLine$.getText();
        return locationText
            .slice(1, -1)
            .split(',')
            .map((loc) => parseInt(loc.split(' ').pop(), 10));
    }
    /**
     * Get the type of the marker
     * Possible types are: File, Error, Warning
     * @returns Promise resolving to a MarkerType
     */
    async getType() {
        const label = await this.elem.getAttribute('aria-label');
        if (!label) {
            return MarkerType.Unknown;
        }
        if (label.startsWith('Error')) {
            return MarkerType.Error;
        }
        return MarkerType.Warning;
    }
};
Problem = __decorate([
    PageDecorator(MarkerLocators)
], Problem);
export { Problem };
/**
 * Possible types of markers
 *  - File = expandable item representing a file
 *  - Error = an error marker
 *  - Warning = a warning marker
 *  - Any = any of the above
 *
 * @hidden
 */
export var MarkerType;
(function (MarkerType) {
    MarkerType["File"] = "file";
    MarkerType["Unknown"] = "unknown";
    MarkerType["Error"] = "error";
    MarkerType["Warning"] = "warning";
    MarkerType["Any"] = "any";
})(MarkerType || (MarkerType = {}));
//# sourceMappingURL=data:application/json;base64,