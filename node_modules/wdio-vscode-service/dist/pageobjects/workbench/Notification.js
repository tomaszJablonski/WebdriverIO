var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BasePage, PageDecorator } from '../utils.js';
import { Notification as NotificationLocators } from '../../locators/1.73.0.js';
/**
 * Available types of notifications
 * @hidden
 */
export var NotificationType;
(function (NotificationType) {
    NotificationType["Info"] = "info";
    NotificationType["Warning"] = "warning";
    NotificationType["Error"] = "error";
    NotificationType["Any"] = "any";
})(NotificationType || (NotificationType = {}));
/**
 * Notification button
 *
 * @category Workbench
 */
class NotificationButton extends BasePage {
    constructor(locators, title) {
        super(locators, locators.Notification.buttonConstructor(title));
        /**
         * @private
         */
        this.locatorKey = 'Notification';
        this.title = title;
    }
    getTitle() {
        return this.title;
    }
}
/**
 * Abstract element representing a notification
 *
 * @category Workbench
 */
export class Notification extends BasePage {
    /**
     * Get the message of the notification
     * @returns Promise resolving to notification message
     */
    getMessage() {
        return this.message$.getText();
    }
    /**
     * Get the type of the notification
     * @returns Promise resolving to NotificationType
     */
    async getType() {
        const iconType = await this.icon$.getAttribute('class');
        if (iconType.indexOf('icon-info') > -1) {
            return NotificationType.Info;
        }
        if (iconType.indexOf('icon-warning') > -1) {
            return NotificationType.Warning;
        }
        return NotificationType.Error;
    }
    /**
     * Get the source of the notification as text
     * @returns Promise resolving to notification source
     */
    async getSource() {
        await this.expand();
        return this.source$.getAttribute('title');
    }
    /**
     * Find whether the notification has an active progress bar
     * @returns Promise resolving to true/false
     */
    async hasProgress() {
        const klass = await this.progress$.getAttribute('class');
        return klass.indexOf('done') < 0;
    }
    /**
     * Dismiss the notification
     * @returns Promise resolving when notification is dismissed
     */
    async dismiss() {
        const btn = await this.dismiss$;
        /**
         * make button interactable given they only contain
         * text on hover
         */
        await browser.execute((btnSection) => { btnSection.style.display = 'block'; }, await this.btnSection$);
        await btn.click();
    }
    /**
     * Get the action buttons of the notification as an array
     * of NotificationButton objects
     * @returns Promise resolving to array of NotificationButton objects
     */
    async getActions() {
        const buttons = [];
        const elements = await this.actions$
            .$$(this.locators.action);
        for (const button of elements) {
            buttons.push(await new NotificationButton(this.locatorMap, await button.getAttribute(this.locators.actionLabel)).wait());
        }
        return buttons;
    }
    /**
     * Click on an action button with the given title
     * @param title title of the action/button
     * @returns Promise resolving when the select button is pressed
     */
    async takeAction(title) {
        await new NotificationButton(this.locatorMap, title).elem.click();
    }
    /**
     * Expand the notification if possible
     */
    async expand() {
        await this.elem.moveTo();
        const exp = await this.expand$$;
        if (exp[0]) {
            await exp[0].click();
        }
    }
}
/**
 * Notification displayed on its own in the notifications-toasts container
 *
 * @category Workbench
 */
let StandaloneNotification = class StandaloneNotification extends Notification {
    constructor(locators, notification) {
        super(locators, notification, locators.Notification.standaloneContainer);
        /**
         * @private
         */
        this.locatorKey = 'Notification';
    }
};
StandaloneNotification = __decorate([
    PageDecorator(NotificationLocators)
], StandaloneNotification);
export { StandaloneNotification };
/**
 * Notification displayed within the notifications center
 *
 * @category Workbench
 */
let CenterNotification = class CenterNotification extends Notification {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Notification';
    }
};
CenterNotification = __decorate([
    PageDecorator(NotificationLocators)
], CenterNotification);
export { CenterNotification };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3dvcmtiZW5jaC9Ob3RpZmljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUNILFFBQVEsRUFBa0IsYUFBYSxFQUMxQyxNQUFNLGFBQWEsQ0FBQTtBQUNwQixPQUFPLEVBQUUsWUFBWSxJQUFJLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFFL0U7OztHQUdHO0FBQ0gsTUFBTSxDQUFOLElBQVksZ0JBS1g7QUFMRCxXQUFZLGdCQUFnQjtJQUN4QixpQ0FBYSxDQUFBO0lBQ2IsdUNBQW1CLENBQUE7SUFDbkIsbUNBQWUsQ0FBQTtJQUNmLCtCQUFXLENBQUE7QUFDZixDQUFDLEVBTFcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUszQjtBQUdEOzs7O0dBSUc7QUFDSCxNQUFNLGtCQUFtQixTQUFRLFFBQXFDO0lBUWxFLFlBQ0ksUUFBMEIsRUFDMUIsS0FBYTtRQUViLEtBQUssQ0FBQyxRQUFRLEVBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxpQkFBOEIsQ0FBQyxLQUFLLENBQVcsQ0FBQyxDQUFBO1FBWDNGOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGNBQXVCLENBQUE7UUFTdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDckIsQ0FBQztDQUNKO0FBR0Q7Ozs7R0FJRztBQUNILE1BQU0sT0FBZ0IsWUFBYSxTQUFRLFFBQXFDO0lBQzVFOzs7T0FHRztJQUNILFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDbEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1QsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FB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QixDQUFDLENBQUE7UUFUdEY7O1dBRUc7UUFDSSxlQUFVLEdBQUcsY0FBdUIsQ0FBQTtJQU8zQyxDQUFDO0NBQ0osQ0FBQTtBQVpZLHNCQUFzQjtJQURsQyxhQUFhLENBQUMsb0JBQW9CLENBQUM7R0FDdkIsc0JBQXNCLENBWWxDOztBQUVEOzs7O0dBSUc7QUFFSSxJQUFNLGtCQUFrQixHQUF4QixNQUFNLGtCQUFtQixTQUFRLFlBQVk7SUFBN0M7O1FBQ0g7O1dBRUc7UUFDSSxlQUFVLEdBQUcsY0FBdUIsQ0FBQTtJQUMvQyxDQUFDO0NBQUEsQ0FBQTtBQUxZLGtCQUFrQjtJQUQ5QixhQUFhLENBQUMsb0JBQW9CLENBQUM7R0FDdkIsa0JBQWtCLENBSzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcbmltcG9ydCB7XG4gICAgQmFzZVBhZ2UsIElQYWdlRGVjb3JhdG9yLCBQYWdlRGVjb3JhdG9yLCBWU0NvZGVMb2NhdG9yTWFwXG59IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIGFzIE5vdGlmaWNhdGlvbkxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG4vKipcbiAqIEF2YWlsYWJsZSB0eXBlcyBvZiBub3RpZmljYXRpb25zXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblR5cGUge1xuICAgIEluZm8gPSAnaW5mbycsXG4gICAgV2FybmluZyA9ICd3YXJuaW5nJyxcbiAgICBFcnJvciA9ICdlcnJvcicsXG4gICAgQW55ID0gJ2FueSdcbn1cblxuaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkJ1dHRvbiBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBOb3RpZmljYXRpb25Mb2NhdG9ycz4ge31cbi8qKlxuICogTm90aWZpY2F0aW9uIGJ1dHRvblxuICpcbiAqIEBjYXRlZ29yeSBXb3JrYmVuY2hcbiAqL1xuY2xhc3MgTm90aWZpY2F0aW9uQnV0dG9uIGV4dGVuZHMgQmFzZVBhZ2U8dHlwZW9mIE5vdGlmaWNhdGlvbkxvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdOb3RpZmljYXRpb24nIGFzIGNvbnN0XG5cbiAgICBwcml2YXRlIHRpdGxlOiBzdHJpbmdcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIHRpdGxlOiBzdHJpbmdcbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIChsb2NhdG9ycy5Ob3RpZmljYXRpb24uYnV0dG9uQ29uc3RydWN0b3IgYXMgRnVuY3Rpb24pKHRpdGxlKSBhcyBzdHJpbmcpXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxuICAgIH1cblxuICAgIGdldFRpdGxlICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50aXRsZVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgTm90aWZpY2F0aW9uTG9jYXRvcnM+IHt9XG4vKipcbiAqIEFic3RyYWN0IGVsZW1lbnQgcmVwcmVzZW50aW5nIGEgbm90aWZpY2F0aW9uXG4gKlxuICogQGNhdGVnb3J5IFdvcmtiZW5jaFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTm90aWZpY2F0aW9uIGV4dGVuZHMgQmFzZVBhZ2U8dHlwZW9mIE5vdGlmaWNhdGlvbkxvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtZXNzYWdlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBub3RpZmljYXRpb24gbWVzc2FnZVxuICAgICAqL1xuICAgIGdldE1lc3NhZ2UgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2UkLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdHlwZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gTm90aWZpY2F0aW9uVHlwZVxuICAgICAqL1xuICAgIGFzeW5jIGdldFR5cGUgKCk6IFByb21pc2U8Tm90aWZpY2F0aW9uVHlwZT4ge1xuICAgICAgICBjb25zdCBpY29uVHlwZSA9IGF3YWl0IHRoaXMuaWNvbiQuZ2V0QXR0cmlidXRlKCdjbGFzcycpXG4gICAgICAgIGlmIChpY29uVHlwZS5pbmRleE9mKCdpY29uLWluZm8nKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uVHlwZS5JbmZvXG4gICAgICAgIH0gaWYgKGljb25UeXBlLmluZGV4T2YoJ2ljb24td2FybmluZycpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBOb3RpZmljYXRpb25UeXBlLldhcm5pbmdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uVHlwZS5FcnJvclxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc291cmNlIG9mIHRoZSBub3RpZmljYXRpb24gYXMgdGV4dFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIG5vdGlmaWNhdGlvbiBzb3VyY2VcbiAgICAgKi9cbiAgICBhc3luYyBnZXRTb3VyY2UgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhwYW5kKClcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlJC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIHdoZXRoZXIgdGhlIG5vdGlmaWNhdGlvbiBoYXMgYW4gYWN0aXZlIHByb2dyZXNzIGJhclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRydWUvZmFsc2VcbiAgICAgKi9cbiAgICBhc3luYyBoYXNQcm9ncmVzcyAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGtsYXNzID0gYXdhaXQgdGhpcy5wcm9ncmVzcyQuZ2V0QXR0cmlidXRlKCdjbGFzcycpXG4gICAgICAgIHJldHVybiBrbGFzcy5pbmRleE9mKCdkb25lJykgPCAwXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzbWlzcyB0aGUgbm90aWZpY2F0aW9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiBub3RpZmljYXRpb24gaXMgZGlzbWlzc2VkXG4gICAgICovXG4gICAgYXN5bmMgZGlzbWlzcyAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGJ0biA9IGF3YWl0IHRoaXMuZGlzbWlzcyRcblxuICAgICAgICAvKipcbiAgICAgICAgICogbWFrZSBidXR0b24gaW50ZXJhY3RhYmxlIGdpdmVuIHRoZXkgb25seSBjb250YWluXG4gICAgICAgICAqIHRleHQgb24gaG92ZXJcbiAgICAgICAgICovXG4gICAgICAgIGF3YWl0IGJyb3dzZXIuZXhlY3V0ZShcbiAgICAgICAgICAgIChidG5TZWN0aW9uKSA9PiB7IGJ0blNlY3Rpb24uc3R5bGUuZGlzcGxheSA9ICdibG9jaycgfSxcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYnRuU2VjdGlvbiQgYXMgYW55IGFzIEhUTUxMaW5rRWxlbWVudFxuICAgICAgICApXG5cbiAgICAgICAgYXdhaXQgYnRuLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFjdGlvbiBidXR0b25zIG9mIHRoZSBub3RpZmljYXRpb24gYXMgYW4gYXJyYXlcbiAgICAgKiBvZiBOb3RpZmljYXRpb25CdXR0b24gb2JqZWN0c1xuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFycmF5IG9mIE5vdGlmaWNhdGlvbkJ1dHRvbiBvYmplY3RzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWN0aW9ucyAoKTogUHJvbWlzZTxOb3RpZmljYXRpb25CdXR0b25bXT4ge1xuICAgICAgICBjb25zdCBidXR0b25zOiBOb3RpZmljYXRpb25CdXR0b25bXSA9IFtdXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgdGhpcy5hY3Rpb25zJFxuICAgICAgICAgICAgLiQkKHRoaXMubG9jYXRvcnMuYWN0aW9uKVxuXG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBidXR0b25zLnB1c2goYXdhaXQgbmV3IE5vdGlmaWNhdGlvbkJ1dHRvbihcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0b3JNYXAsXG4gICAgICAgICAgICAgICAgYXdhaXQgYnV0dG9uLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmFjdGlvbkxhYmVsKVxuICAgICAgICAgICAgKS53YWl0KCkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1dHRvbnNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBvbiBhbiBhY3Rpb24gYnV0dG9uIHdpdGggdGhlIGdpdmVuIHRpdGxlXG4gICAgICogQHBhcmFtIHRpdGxlIHRpdGxlIG9mIHRoZSBhY3Rpb24vYnV0dG9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgc2VsZWN0IGJ1dHRvbiBpcyBwcmVzc2VkXG4gICAgICovXG4gICAgYXN5bmMgdGFrZUFjdGlvbiAodGl0bGU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBuZXcgTm90aWZpY2F0aW9uQnV0dG9uKFxuICAgICAgICAgICAgdGhpcy5sb2NhdG9yTWFwLFxuICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgKS5lbGVtLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHBhbmQgdGhlIG5vdGlmaWNhdGlvbiBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIGFzeW5jIGV4cGFuZCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZWxlbS5tb3ZlVG8oKVxuICAgICAgICBjb25zdCBleHAgPSBhd2FpdCB0aGlzLmV4cGFuZCQkXG4gICAgICAgIGlmIChleHBbMF0pIHtcbiAgICAgICAgICAgIGF3YWl0IGV4cFswXS5jbGljaygpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogTm90aWZpY2F0aW9uIGRpc3BsYXllZCBvbiBpdHMgb3duIGluIHRoZSBub3RpZmljYXRpb25zLXRvYXN0cyBjb250YWluZXJcbiAqXG4gKiBAY2F0ZWdvcnkgV29ya2JlbmNoXG4gKi9cbkBQYWdlRGVjb3JhdG9yKE5vdGlmaWNhdGlvbkxvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIFN0YW5kYWxvbmVOb3RpZmljYXRpb24gZXh0ZW5kcyBOb3RpZmljYXRpb24ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnTm90aWZpY2F0aW9uJyBhcyBjb25zdFxuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgbm90aWZpY2F0aW9uOiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PlxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgbm90aWZpY2F0aW9uLCBsb2NhdG9ycy5Ob3RpZmljYXRpb24uc3RhbmRhbG9uZUNvbnRhaW5lciBhcyBzdHJpbmcpXG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGlmaWNhdGlvbiBkaXNwbGF5ZWQgd2l0aGluIHRoZSBub3RpZmljYXRpb25zIGNlbnRlclxuICpcbiAqIEBjYXRlZ29yeSBXb3JrYmVuY2hcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoTm90aWZpY2F0aW9uTG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgQ2VudGVyTm90aWZpY2F0aW9uIGV4dGVuZHMgTm90aWZpY2F0aW9uIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ05vdGlmaWNhdGlvbicgYXMgY29uc3Rcbn1cbiJdfQ==