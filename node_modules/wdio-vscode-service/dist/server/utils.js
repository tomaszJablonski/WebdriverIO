import fs from 'node:fs/promises';
import path from 'node:path';
import { URI } from 'vscode-uri';
import { fsProviderExtensionPrefix, fsProviderFolderUri } from './constants.js';
export async function getWorkbenchOptions(ctx, config) {
    const options = {};
    if (config.extensionPaths) {
        const extensionPromises = config.extensionPaths.map((extensionPath, index) => scanForExtensions(extensionPath, {
            scheme: ctx.protocol,
            authority: ctx.host,
            path: `/static/extensions/${index}`
        }));
        options.additionalBuiltinExtensions = (await Promise.all(extensionPromises)).flat();
    }
    if (config.extensionIds) {
        if (!options.additionalBuiltinExtensions) {
            options.additionalBuiltinExtensions = [];
        }
        options.additionalBuiltinExtensions.push(...config.extensionIds);
    }
    if (config.extensionDevelopmentPath) {
        const developmentOptions = options.developmentOptions = {};
        developmentOptions.extensions = await scanForExtensions(config.extensionDevelopmentPath, { scheme: ctx.protocol, authority: ctx.host, path: '/static/devextensions' });
        if (config.extensionTestsPath) {
            let relativePath = path.relative(config.extensionDevelopmentPath, config.extensionTestsPath);
            if (process.platform === 'win32') {
                relativePath = relativePath.replace(/\\/g, '/');
            }
            developmentOptions.extensionTestsPath = {
                scheme: ctx.protocol,
                authority: ctx.host,
                path: path.posix.join('/static/devextensions', relativePath)
            };
        }
    }
    if (config.folderMountPath) {
        if (!options.additionalBuiltinExtensions) {
            options.additionalBuiltinExtensions = [];
        }
        options.additionalBuiltinExtensions.push({
            scheme: ctx.protocol,
            authority: ctx.host,
            path: fsProviderExtensionPrefix
        });
        options.folderUri = URI.parse(fsProviderFolderUri);
    }
    else if (config.folderUri) {
        options.folderUri = URI.parse(config.folderUri);
    }
    else {
        options.workspaceUri = URI.from({ scheme: 'tmp', path: '/default.code-workspace' });
    }
    options.productConfiguration = { enableTelemetry: false };
    return options;
}
export async function scanForExtensions(rootPath, serverURI) {
    const result = [];
    async function getExtension(relativePosixFolderPath) {
        try {
            const packageJSONPath = path.join(rootPath, relativePosixFolderPath, 'package.json');
            if ((await fs.stat(packageJSONPath)).isFile()) {
                return {
                    scheme: serverURI.scheme,
                    authority: serverURI.authority,
                    path: path.posix.join(serverURI.path, relativePosixFolderPath)
                };
            }
        }
        catch {
            return undefined;
        }
        return undefined;
    }
    async function processFolder(relativePosixFolderPath) {
        const extension = await getExtension(relativePosixFolderPath);
        if (extension) {
            result.push(extension);
        }
        else {
            const folderPath = path.join(rootPath, relativePosixFolderPath);
            const entries = await fs.readdir(folderPath, { withFileTypes: true });
            for (const entry of entries) {
                if (entry.isDirectory() && entry.name.charAt(0) !== '.') {
                    await processFolder(path.posix.join(relativePosixFolderPath, entry.name));
                }
            }
        }
    }
    await processFolder('');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2pDLE9BQU8sSUFBSSxNQUFNLFdBQVcsQ0FBQTtBQUU1QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRWhDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBd0QvRSxNQUFNLENBQUMsS0FBSyxVQUFVLG1CQUFtQixDQUNyQyxHQUF1QyxFQUN2QyxNQUFlO0lBRWYsTUFBTSxPQUFPLEdBQXNCLEVBQUUsQ0FBQTtJQUNyQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4QixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUMvQyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRTtZQUN2RCxNQUFNLEVBQUUsR0FBRyxDQUFDLFFBQVE7WUFDcEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJO1lBQ25CLElBQUksRUFBRSxzQkFBc0IsS0FBSyxFQUFFO1NBQ3RDLENBQUMsQ0FDTCxDQUFBO1FBQ0QsT0FBTyxDQUFDLDJCQUEyQixHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUN2RixDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQywyQkFBMkIsR0FBRyxFQUFFLENBQUE7UUFDNUMsQ0FBQztRQUVELE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFN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Q0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQztpQkFDakUsQ0FBQTtZQUNMLENBQUM7UUFDTCxDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ0wsT0FBTyxTQUFTLENBQUE7UUFDcEIsQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxLQUFLLFVBQVUsYUFBYSxDQUFFLHVCQUErQjtRQUN6RCxNQUFNLFNBQVMsR0FBRyxNQUFNLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBQzdELElBQUksU0FBUyxFQUFFLENBQUM7WUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzFCLENBQUM7YUFBTSxDQUFDO1lBQ0osTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtZQUMvRCxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7WUFDckUsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDMUIsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7b0JBQ3RELE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2dCQUM3RSxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDdkIsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdub2RlOmZzL3Byb21pc2VzJ1xuaW1wb3J0IHBhdGggZnJvbSAnbm9kZTpwYXRoJ1xuXG5pbXBvcnQgeyBVUkkgfSBmcm9tICd2c2NvZGUtdXJpJ1xuXG5pbXBvcnQgeyBmc1Byb3ZpZGVyRXh0ZW5zaW9uUHJlZml4LCBmc1Byb3ZpZGVyRm9sZGVyVXJpIH0gZnJvbSAnLi9jb25zdGFudHMuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbmZpZyB7XG4gICAgcmVhZG9ubHkgZXh0ZW5zaW9uUGF0aHM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkXG4gICAgcmVhZG9ubHkgZXh0ZW5zaW9uSWRzOiBHYWxsZXJ5RXh0ZW5zaW9uSW5mb1tdIHwgdW5kZWZpbmVkXG4gICAgcmVhZG9ubHkgZXh0ZW5zaW9uRGV2ZWxvcG1lbnRQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICByZWFkb25seSBleHRlbnNpb25UZXN0c1BhdGg6IHN0cmluZyB8IHVuZGVmaW5lZFxuICAgIHJlYWRvbmx5IGJ1aWxkOiBTb3VyY2VzIHwgU3RhdGljIHwgQ0ROXG4gICAgcmVhZG9ubHkgZm9sZGVyVXJpOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICByZWFkb25seSBmb2xkZXJNb3VudFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZFxuICAgIHJlYWRvbmx5IHByaW50U2VydmVyTG9nOiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FsbGVyeUV4dGVuc2lvbkluZm8ge1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmdcbiAgICByZWFkb25seSBwcmVSZWxlYXNlPzogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNvdXJjZXMge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzb3VyY2VzJ1xuICAgIHJlYWRvbmx5IGxvY2F0aW9uOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWMge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdGF0aWMnXG4gICAgcmVhZG9ubHkgbG9jYXRpb246IHN0cmluZ1xuICAgIHJlYWRvbmx5IHF1YWxpdHk6ICdzdGFibGUnIHwgJ2luc2lkZXInXG4gICAgcmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ0ROIHtcbiAgICByZWFkb25seSB0eXBlOiAnY2RuJ1xuICAgIHJlYWRvbmx5IHVyaTogc3RyaW5nXG59XG5cbmludGVyZmFjZSBJRGV2ZWxvcG1lbnRPcHRpb25zIHtcbiAgICBleHRlbnNpb25UZXN0c1BhdGg/OiBVUklDb21wb25lbnRzXG4gICAgZXh0ZW5zaW9ucz86IFVSSUNvbXBvbmVudHNbXVxufVxuXG5pbnRlcmZhY2UgVVJJQ29tcG9uZW50cyB7XG4gICAgc2NoZW1lOiBzdHJpbmdcbiAgICBhdXRob3JpdHk6IHN0cmluZ1xuICAgIHBhdGg6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgSVdvcmtiZW5jaE9wdGlvbnMge1xuICAgIGFkZGl0aW9uYWxCdWlsdGluRXh0ZW5zaW9ucz86IChzdHJpbmcgfCBVUklDb21wb25lbnRzIHwgR2FsbGVyeUV4dGVuc2lvbkluZm8pW11cbiAgICBkZXZlbG9wbWVudE9wdGlvbnM/OiBJRGV2ZWxvcG1lbnRPcHRpb25zXG4gICAgcHJvZHVjdENvbmZpZ3VyYXRpb24/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XG5cbiAgICAvLyBvcHRpb25zIG9mIHRoZSBidWlsdGluIHdvcmtiZW5jaCAodnMvY29kZS9icm93c2VyL3dvcmtiZW5jaC93b3JrYmVuY2gpXG4gICAgZm9sZGVyVXJpPzogVVJJQ29tcG9uZW50c1xuICAgIHdvcmtzcGFjZVVyaT86IFVSSUNvbXBvbmVudHNcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFdvcmtiZW5jaE9wdGlvbnMgKFxuICAgIGN0eDogeyBwcm90b2NvbDogc3RyaW5nLCBob3N0OiBzdHJpbmcgfSxcbiAgICBjb25maWc6IElDb25maWdcbik6IFByb21pc2U8SVdvcmtiZW5jaE9wdGlvbnM+IHtcbiAgICBjb25zdCBvcHRpb25zOiBJV29ya2JlbmNoT3B0aW9ucyA9IHt9XG4gICAgaWYgKGNvbmZpZy5leHRlbnNpb25QYXRocykge1xuICAgICAgICBjb25zdCBleHRlbnNpb25Qcm9taXNlcyA9IGNvbmZpZy5leHRlbnNpb25QYXRocy5tYXAoXG4gICAgICAgICAgICAoZXh0ZW5zaW9uUGF0aCwgaW5kZXgpID0+IHNjYW5Gb3JFeHRlbnNpb25zKGV4dGVuc2lvblBhdGgsIHtcbiAgICAgICAgICAgICAgICBzY2hlbWU6IGN0eC5wcm90b2NvbCxcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IGN0eC5ob3N0LFxuICAgICAgICAgICAgICAgIHBhdGg6IGAvc3RhdGljL2V4dGVuc2lvbnMvJHtpbmRleH1gXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICAgIG9wdGlvbnMuYWRkaXRpb25hbEJ1aWx0aW5FeHRlbnNpb25zID0gKGF3YWl0IFByb21pc2UuYWxsKGV4dGVuc2lvblByb21pc2VzKSkuZmxhdCgpXG4gICAgfVxuICAgIGlmIChjb25maWcuZXh0ZW5zaW9uSWRzKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5hZGRpdGlvbmFsQnVpbHRpbkV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYWRkaXRpb25hbEJ1aWx0aW5FeHRlbnNpb25zID0gW11cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuYWRkaXRpb25hbEJ1aWx0aW5FeHRlbnNpb25zLnB1c2goLi4uY29uZmlnLmV4dGVuc2lvbklkcylcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5leHRlbnNpb25EZXZlbG9wbWVudFBhdGgpIHtcbiAgICAgICAgY29uc3QgZGV2ZWxvcG1lbnRPcHRpb25zOiBJRGV2ZWxvcG1lbnRPcHRpb25zID0gb3B0aW9ucy5kZXZlbG9wbWVudE9wdGlvbnMgPSB7fVxuXG4gICAgICAgIGRldmVsb3BtZW50T3B0aW9ucy5leHRlbnNpb25zID0gYXdhaXQgc2NhbkZvckV4dGVuc2lvbnMoXG4gICAgICAgICAgICBjb25maWcuZXh0ZW5zaW9uRGV2ZWxvcG1lbnRQYXRoLFxuICAgICAgICAgICAgeyBzY2hlbWU6IGN0eC5wcm90b2NvbCwgYXV0aG9yaXR5OiBjdHguaG9zdCwgcGF0aDogJy9zdGF0aWMvZGV2ZXh0ZW5zaW9ucycgfVxuICAgICAgICApXG4gICAgICAgIGlmIChjb25maWcuZXh0ZW5zaW9uVGVzdHNQYXRoKSB7XG4gICAgICAgICAgICBsZXQgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShjb25maWcuZXh0ZW5zaW9uRGV2ZWxvcG1lbnRQYXRoLCBjb25maWcuZXh0ZW5zaW9uVGVzdHNQYXRoKVxuICAgICAgICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGggPSByZWxhdGl2ZVBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXZlbG9wbWVudE9wdGlvbnMuZXh0ZW5zaW9uVGVzdHNQYXRoID0ge1xuICAgICAgICAgICAgICAgIHNjaGVtZTogY3R4LnByb3RvY29sLFxuICAgICAgICAgICAgICAgIGF1dGhvcml0eTogY3R4Lmhvc3QsXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aC5wb3NpeC5qb2luKCcvc3RhdGljL2RldmV4dGVuc2lvbnMnLCByZWxhdGl2ZVBhdGgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbmZpZy5mb2xkZXJNb3VudFBhdGgpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmFkZGl0aW9uYWxCdWlsdGluRXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucy5hZGRpdGlvbmFsQnVpbHRpbkV4dGVuc2lvbnMgPSBbXVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuYWRkaXRpb25hbEJ1aWx0aW5FeHRlbnNpb25zLnB1c2goe1xuICAgICAgICAgICAgc2NoZW1lOiBjdHgucHJvdG9jb2wsXG4gICAgICAgICAgICBhdXRob3JpdHk6IGN0eC5ob3N0LFxuICAgICAgICAgICAgcGF0aDogZnNQcm92aWRlckV4dGVuc2lvblByZWZpeFxuICAgICAgICB9KVxuICAgICAgICBvcHRpb25zLmZvbGRlclVyaSA9IFVSSS5wYXJzZShmc1Byb3ZpZGVyRm9sZGVyVXJpKVxuICAgIH0gZWxzZSBpZiAoY29uZmlnLmZvbGRlclVyaSkge1xuICAgICAgICBvcHRpb25zLmZvbGRlclVyaSA9IFVSSS5wYXJzZShjb25maWcuZm9sZGVyVXJpKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMud29ya3NwYWNlVXJpID0gVVJJLmZyb20oeyBzY2hlbWU6ICd0bXAnLCBwYXRoOiAnL2RlZmF1bHQuY29kZS13b3Jrc3BhY2UnIH0pXG4gICAgfVxuICAgIG9wdGlvbnMucHJvZHVjdENvbmZpZ3VyYXRpb24gPSB7IGVuYWJsZVRlbGVtZXRyeTogZmFsc2UgfVxuICAgIHJldHVybiBvcHRpb25zXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzY2FuRm9yRXh0ZW5zaW9ucyAoXG4gICAgcm9vdFBhdGg6IHN0cmluZyxcbiAgICBzZXJ2ZXJVUkk6IFVSSUNvbXBvbmVudHNcbik6IFByb21pc2U8VVJJQ29tcG9uZW50c1tdPiB7XG4gICAgY29uc3QgcmVzdWx0OiBVUklDb21wb25lbnRzW10gPSBbXVxuICAgIGFzeW5jIGZ1bmN0aW9uIGdldEV4dGVuc2lvbiAocmVsYXRpdmVQb3NpeEZvbGRlclBhdGg6IHN0cmluZyk6IFByb21pc2U8VVJJQ29tcG9uZW50cyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFja2FnZUpTT05QYXRoID0gcGF0aC5qb2luKHJvb3RQYXRoLCByZWxhdGl2ZVBvc2l4Rm9sZGVyUGF0aCwgJ3BhY2thZ2UuanNvbicpXG4gICAgICAgICAgICBpZiAoKGF3YWl0IGZzLnN0YXQocGFja2FnZUpTT05QYXRoKSkuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWU6IHNlcnZlclVSSS5zY2hlbWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eTogc2VydmVyVVJJLmF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aC5wb3NpeC5qb2luKHNlcnZlclVSSS5wYXRoLCByZWxhdGl2ZVBvc2l4Rm9sZGVyUGF0aClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NGb2xkZXIgKHJlbGF0aXZlUG9zaXhGb2xkZXJQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gYXdhaXQgZ2V0RXh0ZW5zaW9uKHJlbGF0aXZlUG9zaXhGb2xkZXJQYXRoKVxuICAgICAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChleHRlbnNpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gcGF0aC5qb2luKHJvb3RQYXRoLCByZWxhdGl2ZVBvc2l4Rm9sZGVyUGF0aClcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhd2FpdCBmcy5yZWFkZGlyKGZvbGRlclBhdGgsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KVxuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkgJiYgZW50cnkubmFtZS5jaGFyQXQoMCkgIT09ICcuJykge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwcm9jZXNzRm9sZGVyKHBhdGgucG9zaXguam9pbihyZWxhdGl2ZVBvc2l4Rm9sZGVyUGF0aCwgZW50cnkubmFtZSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgcHJvY2Vzc0ZvbGRlcignJylcbiAgICByZXR1cm4gcmVzdWx0XG59XG4iXX0=