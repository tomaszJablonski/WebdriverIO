import WebSocket from 'ws';
import { SETTINGS_KEY } from '../constants.js';
export async function run(vscode) {
    const config = vscode.workspace.getConfiguration(SETTINGS_KEY);
    console.log(`Connect to service proxy on port ${config.port}`);
    const ws = new WebSocket(`ws://localhost:${config.port}`);
    ws.on('open', () => console.log('WebSocket proxy connected'));
    ws.on('message', async (data) => {
        try {
            // eslint-disable-next-line @typescript-eslint/no-base-to-string
            const message = data.toString();
            console.log(`Received remote command: ${message}`);
            const { id, fn, params } = JSON.parse(message);
            try {
                // eslint-disable-next-line no-eval, @typescript-eslint/no-unsafe-call
                let result = eval(fn).call(globalThis, vscode, ...params);
                if (typeof result === 'object' && typeof result.then === 'function') {
                    result = await result;
                }
                const response = JSON.stringify({ id, result });
                console.log(`Return remote response: ${response}`);
                return ws.send(response);
            }
            catch (err) {
                return ws.send(JSON.stringify({ id, error: err.message }));
            }
        }
        catch (err) {
            console.error(`Failed run remote command: ${err.message}`);
        }
        return null;
    });
    return new Promise(() => { });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJveHkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxTQUFTLE1BQU0sSUFBSSxDQUFBO0FBRTFCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUc5QyxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBRSxNQUEyQjtJQUNsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRTlELE1BQU0sRUFBRSxHQUFHLElBQUksU0FBUyxDQUFDLGtCQUFrQixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUN6RCxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUM3RCxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDNUIsSUFBSSxDQUFDO1lBQ0QsZ0VBQWdFO1lBQ2hFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixPQUFPLEVBQUUsQ0FBQyxDQUFBO1lBRWxELE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFrQixDQUFBO1lBRS9ELElBQUksQ0FBQztnQkFDRCxzRUFBc0U7Z0JBQ3RFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFBO2dCQUN6RCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFLENBQUM7b0JBQ2xFLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQTtnQkFDekIsQ0FBQztnQkFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFpQixFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO2dCQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixRQUFRLEVBQUUsQ0FBQyxDQUFBO2dCQUVsRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDNUIsQ0FBQztZQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFpQixFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUM5RSxDQUFDO1FBQ0wsQ0FBQztRQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDOUQsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlcyAqL1xuaW1wb3J0IHR5cGUgVlNDb2RlSW1wb3J0IGZyb20gJ3ZzY29kZSdcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSAnd3MnXG5cbmltcG9ydCB7IFNFVFRJTkdTX0tFWSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcydcbmltcG9ydCB0eXBlIHsgUmVtb3RlQ29tbWFuZCwgUmVtb3RlUmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy5qcydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1biAodnNjb2RlOiB0eXBlb2YgVlNDb2RlSW1wb3J0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY29uZmlnID0gdnNjb2RlLndvcmtzcGFjZS5nZXRDb25maWd1cmF0aW9uKFNFVFRJTkdTX0tFWSlcbiAgICBjb25zb2xlLmxvZyhgQ29ubmVjdCB0byBzZXJ2aWNlIHByb3h5IG9uIHBvcnQgJHtjb25maWcucG9ydH1gKVxuXG4gICAgY29uc3Qgd3MgPSBuZXcgV2ViU29ja2V0KGB3czovL2xvY2FsaG9zdDoke2NvbmZpZy5wb3J0fWApXG4gICAgd3Mub24oJ29wZW4nLCAoKSA9PiBjb25zb2xlLmxvZygnV2ViU29ja2V0IHByb3h5IGNvbm5lY3RlZCcpKVxuICAgIHdzLm9uKCdtZXNzYWdlJywgYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tYmFzZS10by1zdHJpbmdcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkYXRhLnRvU3RyaW5nKClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCByZW1vdGUgY29tbWFuZDogJHttZXNzYWdlfWApXG5cbiAgICAgICAgICAgIGNvbnN0IHsgaWQsIGZuLCBwYXJhbXMgfSA9IEpTT04ucGFyc2UobWVzc2FnZSkgYXMgUmVtb3RlQ29tbWFuZFxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZXZhbChmbikuY2FsbChnbG9iYWxUaGlzLCB2c2NvZGUsIC4uLnBhcmFtcylcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJlc3VsdFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5zdHJpbmdpZnkoPFJlbW90ZVJlc3BvbnNlPnsgaWQsIHJlc3VsdCB9KVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBSZXR1cm4gcmVtb3RlIHJlc3BvbnNlOiAke3Jlc3BvbnNlfWApXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd3Muc2VuZChyZXNwb25zZSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoPFJlbW90ZVJlc3BvbnNlPnsgaWQsIGVycm9yOiBlcnIubWVzc2FnZSB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCBydW4gcmVtb3RlIGNvbW1hbmQ6ICR7ZXJyLm1lc3NhZ2V9YClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4ge30pXG59XG4iXX0=