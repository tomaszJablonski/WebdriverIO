#!/usr/bin/env node
"use strict";
/* eslint-disable node/shebang, @typescript-eslint/no-var-requires */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * we require here because `pkg` doesn't support ESM yet
 * see https://github.com/vercel/pkg/pull/1323
 */
const childProcess = require('node:child_process');
const argvParser = require('yargs-parser');
/**
 * Chrome wrapper run method
 * @param  {Object} p         Node.js global variable
 * @param  {Object} execFile  child_process.execFile function
 * @return {Object}           child process running chrome
 */
function run(p, execFile) {
    console.info('[FAKE VSCode Binary] init...'); // eslint-disable-line no-console
    p.on('uncaughtException', 
    /* istanbul ignore next */
    // eslint-disable-next-line no-console
    (err) => console.info(`[FAKE VSCode Binary] Error: ${err.stack}`));
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { _: positionalParams, ...argv } = argvParser(process.argv.slice(2), {
        configuration: { 'camel-case-expansion': true, 'boolean-negation': false }
    });
    const binaryPath = argv.vscodeBinaryPath;
    if (!binaryPath) {
        throw new Error('Missing parameter "--vscode-binary-path=/..."');
    }
    const params = Object.entries(argv).map(([key, value]) => {
        if (typeof value === 'boolean' && value) {
            return `--${key}`;
        }
        return `--${key}=${value}`;
    });
    const args = [...params, ...positionalParams.map(String)];
    // eslint-disable-next-line no-console
    console.info(`[FAKE VSCode Binary] starting: ${binaryPath}`, args.join(' '));
    const cp = execFile(binaryPath, args, {
        env: p.env,
        cwd: p.cwd()
    });
    cp.stderr?.on('data', 
    // eslint-disable-next-line no-console
    (msg) => console.log(`[FAKE VSCode Binary] STDERR: ${msg}`));
    cp.stdout?.on('data', 
    // eslint-disable-next-line no-console
    (msg) => console.log(`[FAKE VSCode Binary] STDOUT: ${msg}`));
    return cp;
}
/* istanbul ignore if */
if (require.main === module) {
    run(process, childProcess.execFile);
}
else {
    module.exports = run;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2hyb21pdW0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxxRUFBcUU7O0FBRXJFOzs7R0FHRztBQUNILE1BQU0sWUFBWSxHQUF3QyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtBQUN2RixNQUFNLFVBQVUsR0FBa0MsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBRXpFOzs7OztHQUtHO0FBQ0gsU0FBUyxHQUFHLENBQUUsQ0FBaUIsRUFBRSxRQUFzQztJQUNuRSxPQUFPLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUEsQ0FBQyxpQ0FBaUM7SUFFOUUsQ0FBQyxDQUFDLEVBQUUsQ0FDQSxtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLHNDQUFzQztJQUN0QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQywrQkFBK0IsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQ3BFLENBQUE7SUFFRCxnRUFBZ0U7SUFDaEUsTUFBTSxFQUFFLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN2RSxhQUFhLEVBQUUsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFO0tBQzdFLENBQUMsQ0FBQTtJQUVGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBMEIsQ0FBQTtJQUNsRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUE7SUFDcEUsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNyRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUN0QyxPQUFPLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDckIsQ0FBQztRQUNELE9BQU8sS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFDRixNQUFNLElBQUksR0FBYSxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFFbkUsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM1RSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRTtRQUNsQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUc7UUFDVixHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRTtLQUNmLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNULE1BQU07SUFDTixzQ0FBc0M7SUFDdEMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEdBQUcsRUFBRSxDQUFDLENBQzlELENBQUE7SUFDRCxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDVCxNQUFNO0lBQ04sc0NBQXNDO0lBQ3RDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxHQUFHLEVBQUUsQ0FBQyxDQUM5RCxDQUFBO0lBRUQsT0FBTyxFQUFFLENBQUE7QUFDYixDQUFDO0FBRUQsd0JBQXdCO0FBQ3hCLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUUsQ0FBQztJQUMxQixHQUFHLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN2QyxDQUFDO0tBQU0sQ0FBQztJQUNKLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFBO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL3NoZWJhbmcsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMgKi9cblxuLyoqXG4gKiB3ZSByZXF1aXJlIGhlcmUgYmVjYXVzZSBgcGtnYCBkb2Vzbid0IHN1cHBvcnQgRVNNIHlldFxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvcGtnL3B1bGwvMTMyM1xuICovXG5jb25zdCBjaGlsZFByb2Nlc3M6IHR5cGVvZiBpbXBvcnQoJ25vZGU6Y2hpbGRfcHJvY2VzcycpID0gcmVxdWlyZSgnbm9kZTpjaGlsZF9wcm9jZXNzJylcbmNvbnN0IGFyZ3ZQYXJzZXI6IHR5cGVvZiBpbXBvcnQoJ3lhcmdzLXBhcnNlcicpID0gcmVxdWlyZSgneWFyZ3MtcGFyc2VyJylcblxuLyoqXG4gKiBDaHJvbWUgd3JhcHBlciBydW4gbWV0aG9kXG4gKiBAcGFyYW0gIHtPYmplY3R9IHAgICAgICAgICBOb2RlLmpzIGdsb2JhbCB2YXJpYWJsZVxuICogQHBhcmFtICB7T2JqZWN0fSBleGVjRmlsZSAgY2hpbGRfcHJvY2Vzcy5leGVjRmlsZSBmdW5jdGlvblxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgY2hpbGQgcHJvY2VzcyBydW5uaW5nIGNocm9tZVxuICovXG5mdW5jdGlvbiBydW4gKHA6IE5vZGVKUy5Qcm9jZXNzLCBleGVjRmlsZTogdHlwZW9mIGNoaWxkUHJvY2Vzcy5leGVjRmlsZSkge1xuICAgIGNvbnNvbGUuaW5mbygnW0ZBS0UgVlNDb2RlIEJpbmFyeV0gaW5pdC4uLicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXG4gICAgcC5vbihcbiAgICAgICAgJ3VuY2F1Z2h0RXhjZXB0aW9uJyxcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgKGVycikgPT4gY29uc29sZS5pbmZvKGBbRkFLRSBWU0NvZGUgQmluYXJ5XSBFcnJvcjogJHtlcnIuc3RhY2t9YClcbiAgICApXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgY29uc3QgeyBfOiBwb3NpdGlvbmFsUGFyYW1zLCAuLi5hcmd2IH0gPSBhcmd2UGFyc2VyKHByb2Nlc3MuYXJndi5zbGljZSgyKSwge1xuICAgICAgICBjb25maWd1cmF0aW9uOiB7ICdjYW1lbC1jYXNlLWV4cGFuc2lvbic6IHRydWUsICdib29sZWFuLW5lZ2F0aW9uJzogZmFsc2UgfVxuICAgIH0pXG5cbiAgICBjb25zdCBiaW5hcnlQYXRoID0gYXJndi52c2NvZGVCaW5hcnlQYXRoIGFzIHN0cmluZ1xuICAgIGlmICghYmluYXJ5UGF0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVyIFwiLS12c2NvZGUtYmluYXJ5LXBhdGg9Ly4uLlwiJylcbiAgICB9XG5cbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZW50cmllcyhhcmd2KS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBgLS0ke2tleX1gXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAtLSR7a2V5fT0ke3ZhbHVlfWBcbiAgICB9KVxuICAgIGNvbnN0IGFyZ3M6IHN0cmluZ1tdID0gWy4uLnBhcmFtcywgLi4ucG9zaXRpb25hbFBhcmFtcy5tYXAoU3RyaW5nKV1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5pbmZvKGBbRkFLRSBWU0NvZGUgQmluYXJ5XSBzdGFydGluZzogJHtiaW5hcnlQYXRofWAsIGFyZ3Muam9pbignICcpKVxuICAgIGNvbnN0IGNwID0gZXhlY0ZpbGUoYmluYXJ5UGF0aCwgYXJncywge1xuICAgICAgICBlbnY6IHAuZW52LFxuICAgICAgICBjd2Q6IHAuY3dkKClcbiAgICB9KVxuXG4gICAgY3Auc3RkZXJyPy5vbihcbiAgICAgICAgJ2RhdGEnLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAobXNnKSA9PiBjb25zb2xlLmxvZyhgW0ZBS0UgVlNDb2RlIEJpbmFyeV0gU1RERVJSOiAke21zZ31gKVxuICAgIClcbiAgICBjcC5zdGRvdXQ/Lm9uKFxuICAgICAgICAnZGF0YScsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIChtc2cpID0+IGNvbnNvbGUubG9nKGBbRkFLRSBWU0NvZGUgQmluYXJ5XSBTVERPVVQ6ICR7bXNnfWApXG4gICAgKVxuXG4gICAgcmV0dXJuIGNwXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gICAgcnVuKHByb2Nlc3MsIGNoaWxkUHJvY2Vzcy5leGVjRmlsZSlcbn0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBydW5cbn1cbiJdfQ==